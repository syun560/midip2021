{"version":3,"sources":["midip/Lib.js","midip/ChordPlayerCell.js","midip/ChordPlayer.js","midip/Instrument.js","midip/Store.js","midip/PianoRollCell.js","midip/PianoRoll.js","midip/NotePane.js","midip/Player.js","midip/Conductor.js","midip/ChannelSelector.js","midip/Sequencer.js","App.js","reportWebVitals.js","index.js"],"names":["Lib","num","base","Math","floor","toString","name","chordPattern","baseName","chordName","substr","baseNote","indexOf","chord","noteEvents","map","offset","push","note","vel","gateMs","ChordPlayerCell","props","state","doClick","bind","this","chordNameToNoteEvents","noteEvent","dispatch","type","data","style","diff","nowKey","index","background","cursor","onClick","Component","connect","ChordPlayer","circleOfFifthKey","circleOfFifthMajor","circleOfFifthMinor","createStyle","e","key","target","getAttribute","setState","item0","data-key","item1","item2","className","Instrument","message","inPorts","outPorts","selectedOutPortID","selectedInPortID","navigator","requestMIDIAccess","sysex","then","midiAccess","inputIterator","inputs","values","input","next","done","value","ID","id","addEventListener","inputEvent","length","outputs","output","device","get","console","log","msg","doChange","numArray","forEach","val","join","send","window","performance","now","n","in_items","out_items","onChange","defaultValue","initData","mea","channel","sortNotes","arr","sort","a","b","tick","midipReducer","action","new_data","slice","del_data","filter","ch","undefined","createStore","PianoRollCell","tdUnselected","width","tdSelected","border","borderLeft","selected","doMouseEnter","isSingle","buttons","gate","sameTickEvents","isPreview","noteNum","row","col","findData","find","onMouseEnter","data-row","data-col","PianoRoll","box","height","overflow","userSelect","th","changeBaseKey","changeMea","changeSingle","changePreview","rollStyle","ref","React","createRef","checked","current","scrollIntoView","block","notes","i","ticks","rows","fuga","indexRow","noteNumberToNoteName","hoge","indexCol","min","max","NotePane","noteItem","Player","Conductor","td","tdNow","maxTick","bpm","nowTick","isPlaying","isLoop","isSolo","PlayToggle","Proceed","ChangeBPM","ChangeLoop","ChangeSolo","ChangeTick","clearTimeout","timer","Play","setTimeout","d","nextTick","delayTime","data-tick","ChannelSelector","channelName","ChangeSelector","items","Sequencer","persistConfig","storage","blacklist","whitelist","persistedReducer","persistReducer","store","pstore","persistStore","App","loading","persistor","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5ed0c85d.chunk.js","sourcesContent":["class Lib {\n    // ノートナンバー（64）をノート（C5）に変換する\n    static noteNumberToNoteName(num) {\n        const notes_name = ['C','C#','D','D#','E','F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n        const base = Math.floor(num / 12) - 1\n        const offset = num % 12\n        return notes_name[offset] + base.toString()\n    }\n\n    static chordNameToNoteEvents(name) {\n        const chordPattern = {\n            major: [0, 4, 7],\n            minor: [0, 3, 7],\n            major7: [0, 4, 7, 11]\n        }\n\n        // 解析する（splitなどを利用する）\n        let baseName = ''\n        let chordName = ''\n\n        if (name[1] == '#') {\n            baseName = name.substr(0, 2)\n            chordName = name.substr(2)\n        }\n        else {\n            baseName = name.substr(0, 1)\n            chordName = name.substr(1)\n        }\n\n        // ノート取得\n        const notes_name = ['C','C#','D','D#','E','F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n        let baseNote = 60\n        baseNote += notes_name.indexOf(baseName)\n\n        // コード取得\n        let chord = []\n        switch(chordName) {\n            case '':\n                chord = chordPattern.major\n                break\n            case 'm':\n                chord = chordPattern.minor\n                break\n            default:\n                break\n        }\n\n        let noteEvents = []\n        chord.map((offset)=>{\n            noteEvents.push({\n                note: baseNote + offset,\n                vel: 100,\n                gateMs: 500\n            })\n        })\n\n        return noteEvents\n    }\n}\n\n\nexport default Lib","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Lib from './Lib'\n\nclass ChordPlayerCell extends Component {\n\n    // テストで音を鳴らす\n    doClick() {\n        const chord = this.props.chord\n        const noteEvents = Lib.chordNameToNoteEvents(chord)\n        \n        noteEvents.map(noteEvent=>{\n            this.props.dispatch({\n                type: 'NOTE_ON',\n                data: noteEvent\n            })\n        })\n    }\n\n    constructor(props){\n        super(props)\n\n        // ステートの設定\n        this.state = {\n        }\n\n        this.doClick = this.doClick.bind(this)\n    }\n\n    render() {\n        // 調による色分け\n        let style\n\n        const diff = (this.props.nowKey - this.props.index + 24) % 12\n        if (diff == 1 || diff == 0 || diff == 11) {\n            style = {\n                background: 'pink',\n                cursor: 'pointer'\n            }\n        }\n        else if (diff == 2 || diff == 3 || diff == 4){\n            style = {\n                background: 'cyan',\n                cursor: 'pointer'\n            }\n        }\n        else if (diff == 5 || diff == 6 || diff == 7){\n            style = {\n                background: 'gray',\n                cursor: 'pointer'\n            }\n        }\n        else if (diff == 8 || diff == 9 || diff == 10){\n            style = {\n                background: 'yellow',\n                cursor: 'pointer'\n            }\n        }\n        else {\n            style = {\n                background: 'gray',\n                cursor: 'pointer'\n            }\n        }\n\n        return (\n        <td onClick={this.doClick} style={style}>           \n            {this.props.chord}\n        </td>\n        )\n    }\n}\n\nexport default connect(state=>state)(ChordPlayerCell)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport ChordPlayerCell from './ChordPlayerCell'\n\nclass ChordPlayer extends Component {\n\n    // 五度圏\n    circleOfFifthKey   = ['','','','','7b', '6b',  '5b',  '4b', '3b', 'bb', 'b',  '♮',   '#', '##', '3#',  '4#',  '5#', '6#',  '7#','','','','']\n    circleOfFifthMajor = ['G','D',  'A',   'E',   'B',  'F#',  'C#',  'G#', 'D#', 'A#', 'F',   'C',  'G',  'D',  'A',   'E',   'B', 'F#', 'C#', 'G#', 'D#', 'A#', 'F']\n    circleOfFifthMinor = ['Em','Bm', 'F#m', 'C#m','G#m','D#m', 'A#m', 'Fm', 'Cm', 'Gm', 'Dm', 'Am', 'Em', 'Bm', 'F#m', 'C#m', 'G#m','D#m', 'A#m','Fm', 'Cm', 'Gm', 'Dm']\n\n    // 調を変える\n    doClick(e) {\n        const key = e.target.getAttribute('data-key')\n        this.setState({nowKey: key})\n    }\n\n    constructor(props){\n        super(props)\n\n        // ステートの設定\n        this.state = {\n            nowKey: 11\n        }\n\n        this.doClick = this.doClick.bind(this)\n        this.createStyle = this.createStyle.bind(this)\n    }\n\n    // スタイルによって色を変える\n    createStyle(key) {\n        let style = null\n        if(this.state.nowKey == key){\n            style = {\n                cursor: 'pointer',\n                background: 'pink'\n            }\n        }else {\n            style = {\n                cursor: 'pointer'\n            }\n        }\n        return style\n    }\n\n    render() {\n        // td作成\n        const item0 = this.circleOfFifthKey  .map((name, index)=><th key={index} style={this.createStyle(index)} onClick={this.doClick} data-key={index}>{name}</th>)\n        const item1 = this.circleOfFifthMajor.map((name, index)=><ChordPlayerCell key={index} index={index} nowKey={this.state.nowKey} chord={name} />)\n        const item2 = this.circleOfFifthMinor.map((name, index)=><ChordPlayerCell key={index} index={index} nowKey={this.state.nowKey} chord={name} />)\n\n        return (\n            <table className='table table-bordered'><tbody>\n                <tr>\n                    {item0}\n                </tr>\n                <tr>\n                    {item1}\n                </tr>\n                <tr>\n                    {item2}\n                </tr>\n            </tbody></table>\n        )\n    }\n}\n\nexport default connect(state=>state)(ChordPlayer)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport ChordPlayer from './ChordPlayer';\n\nclass Instrument extends Component {\n\n    // Inputを受け取ったときのイベント\n    inputEvent(e) {\n        let target = e.target;\n        let message = '';\n        let numArray = [];\n        // 2桁の16進数にして表示する\n        // リアルタイムメッセージ（f8 or feは無視、なんとかして消したい）\n        e.data.forEach(val=> {\n            // if (val == 0xf8 || val == 0xfe) return\n            // numArray.push(('00' + val.toString(16)).substr(-2)); // 謎\n            numArray.push(val.toString(16))\n        });\n        if (numArray[0] == 'f8' || numArray[0] == 'fe') return \n        message = numArray.join(' ');\n        \n        // 選択中のDeviceに結果を送信する\n        this.state.outPorts[0].device.send(e.data);\n\n        // 2桁の16進数を表示\n        console.log(message);\n    }\n\n    // アウトプットセレクトタグが変化した場合\n    doChange(e) {\n        this.setState({ selectedOutPortID : e.target.value })\n    }\n\n    // テストで音を鳴らす\n    doClick() {\n        // 出力先の MIDI ポートを取得\n        const output = this.outputs.get(this.state.selectedOutPortID);\n\n        // MIDI メッセージを送信\n        output.send([0x90, 60, 100]);                                       // ノートオン\n        output.send([0x80, 60, 100], window.performance.now() + 500);      // 1秒後にノートオフ\n        // MIDI メッセージを送信\n        output.send([0x90, 64, 100]);                                       // ノートオン\n        output.send([0x80, 64, 100], window.performance.now() + 500);      // 1秒後にノートオフ\n        // MIDI メッセージを送信\n        output.send([0x90, 67, 100]);                                       // ノートオン\n        output.send([0x80, 67, 100], window.performance.now() + 500);      // 1秒後にノートオフ\n\n        // outputを登録する\n        this.props.dispatch({type: 'REGISTER_OUTPUT', output: output})\n    }\n\n    constructor(props){\n        super(props)\n\n        // ステートの設定\n        this.state = {\n            message: 'please wait...',\n            inPorts: [],\n            outPorts: [],\n            selectedOutPortID: '',\n            selectedInPortID: '',\n        }\n        \n        navigator.requestMIDIAccess({sysex: true}).then(\n            // 通信成功時\n            (midiAccess) => {                \n                // InPortの取得、設定\n                let inputIterator = midiAccess.inputs.values();\n                let inPorts = []\n                for (let input = inputIterator.next(); !input.done; input = inputIterator.next()) {\n                    let value = input.value;\n                    inPorts.push({\n                        name: value.name,\n                        ID: value.id\n                    })\n                    // イベント登録\n                    value.addEventListener('midimessage', this.inputEvent, false);\n                }\n                if (inPorts.length) this.setState({ selectedInPortID: inPorts[0].ID })\n                this.setState({ inPorts: inPorts })\n\n                // OutPortの取得、設定\n                let outPorts = []\n                this.outputs = midiAccess.outputs\n                for (let output of this.outputs.values()) {\n                    outPorts.push({\n                        device: output,\n                        name: output.name,\n                        ID: output.id\n                    })\n                }\n                if (outPorts.length) {\n                    this.setState({ \n                        selectedOutPortID: outPorts[0].ID\n                    })\n\n                    // outputを登録する\n                    this.props.dispatch({type: 'REGISTER_OUTPUT', output: this.outputs.get(outPorts[0].ID)})\n                }\n                this.setState({ \n                    outPorts: outPorts\n                })\n                \n                console.log(\"MIDI READY!!!\");\n                this.setState({message: \"MIDI READY\"})\n            },\n            // 通信失敗時\n            (msg) => {\n                console.log(\"MIDI FAILED - \" + msg);\n            }\n        )\n\n        this.doClick = this.doClick.bind(this)\n        this.doChange = this.doChange.bind(this)\n        this.inputEvent = this.inputEvent.bind(this)\n    }\n\n    render() {\n        // セレクトタグの内容を作る\n        let n = 0\n        let in_items = this.state.inPorts.map(value =>\n            <option key={n++} value={value.ID}>{value.name} ({value.ID})</option> \n            )\n        let out_items = this.state.outPorts.map(value =>\n            <option key={n++} value={value.ID}>{value.name} ({value.ID})</option> \n            )\n\n        return (\n        <div className='row'>\n            <div className='col-md-3'>\n                <table><tbody>\n                    <tr><td>Input: </td><td><select>{ in_items }</select></td></tr>\n                    <tr><td>Output: </td><td><select onChange={this.doChange} defaultValue=\"-1\">{ out_items }</select></td></tr>\n                </tbody></table>\n            </div>\n            <div className='col-md-3'>\n                <ChordPlayer />\n            </div>\n        </div>\n        )\n    }\n}\n\nexport default connect(state=>state)(Instrument)\n","import  { createStore } from 'redux'\n\n// 初期値\nconst initData = {\n    noteEvents: [\n        \n    ],\n    output: null,\n    mea: 1,\n    channel: 0\n}\n\n// 配列のソート\nfunction sortNotes(arr) {\n    arr.sort((a, b) => {\n        if (a.mea < b.mea) return -1\n        if (a.mea > b.mea) return 1\n        if (a.tick < b.tick) return -1\n        if (a.tick > b.tick) return 1\n        if (a.note < b.note) return -1\n        if (a.note > b.note) return 1\n        return 0\n    })\n}\n\n// レデューサ\nexport function midipReducer(state=initData, action) {\n    switch(action.type) {\n    // MIDIイベント管理----------------------------------\n    case 'ADD_EVENT':\n        let new_data = state.noteEvents.slice()\n        new_data.push(action.data)\n        sortNotes(new_data)\n        return {\n            output: state.output,\n            noteEvents: new_data,\n            mea: state.mea,\n            channel: state.channel\n        }\n    case 'DEL_EVENT':\n        let del_data = state.noteEvents.filter(\n            noteEvent=>(\n                noteEvent.channel != action.data.channel ||\n                noteEvent.mea != action.data.mea ||\n                noteEvent.tick != action.data.tick ||\n                noteEvent.note != action.data.note\n            )\n        )\n        return {\n            output: state.output,\n            noteEvents: del_data,\n            mea: state.mea,\n            channel: state.channel\n        }\n    case 'DEL_ALL':\n        return {\n            output: state.output,\n            noteEvents: initData.noteEvents,\n            mea: state.mea,\n            channel: state.channel\n        }\n\n    // MIDIデバイス操作-------------------------------------\n    case 'REGISTER_OUTPUT':\n        return {\n            output: action.output,\n            noteEvents: state.noteEvents,\n            mea: state.mea,\n            channel: state.channel\n        }\n    case 'NOTE_ON':\n        let ch = 0\n        if (action.data.ch === undefined) ch = 0\n        else ch = action.data.ch\n        state.output.send([0x90 + ch, action.data.note, action.data.vel])\n        state.output.send([0x80 + ch, action.data.note, action.data.vel], window.performance.now() + action.data.gateMs);      // 1秒後にノートオフ\n        break\n    case 'ALL_NOTE_OFF':\n        state.output.send([0xB0, 0x7B, 0])\n        break\n    \n    // シーケンス操作--------------------------------------\n    case 'MOVE_MEA':\n        let mea = action.mea\n        if (mea > 128) mea = 128\n        if (mea < 1) mea = 1\n        \n        return {\n            output: state.output,\n            noteEvents: state.noteEvents,\n            mea: mea,\n            channel: state.channel\n        }\n\n    // チャンネル操作-------------------------------------\n    case 'MOVE_CHANNEL':\n        let channel = action.channel\n        if (channel > 15) channel = 15\n        if (channel < 0) channel = 0\n        return {\n            output: state.output,\n            noteEvents: state.noteEvents,\n            mea: state.mea,\n            channel: channel\n        }\n    default: \n        break\n    }\n    return state\n}\n\n\n// 追加のアクション\nexport function addEvent(data) {\n    return {\n        type: 'ADD_EVENT',\n        data: data\n    }\n}\n\n// ストアを作成\nexport default createStore(midipReducer)","import React, { Component } from 'react'\nimport { addEvent } from './Store'\nimport { connect } from 'react-redux'\n\nclass PianoRollCell extends Component {\n    tdUnselected = {\n        width: '50px'\n    }\n    tdSelected = {\n        width: '50px',\n        background: 'cyan'\n    }\n    border = {\n        borderLeft: '2px solid blue',\n        background: 'cyan'\n    }\n\n    // セルがマウスオーバーされた時\n    doMouseEnter(e) {\n        // シングルモードの時\n        if (this.props.isSingle) {\n            // マウス左クリックが押下状態にある時\n            if ((e.buttons & 0x0001) ? true : false) {\n                console.log('Entered')\n                this.doClick(e)\n            }\n        }\n    }\n\n    // セルがクリックされた時\n    doClick(e) {\n        let tick = e.target.getAttribute('data-col') * 1\n        let note = e.target.getAttribute('data-row') * 1\n        this.setState(state => ({selected: !state.selected}))\n\n        if (this.state.selected){\n            this.props.dispatch({\n                type: 'DEL_EVENT',\n                data: {\n                    channel: this.props.channel,\n                    mea: this.props.mea,\n                    tick: tick,\n                    note: note\n                }\n            })\n        }\n        else {\n            let action = addEvent({\n                channel: this.props.channel,\n                mea: this.props.mea,\n                tick: tick,\n                note: note,\n                gate: 120,\n                vel: 100\n            })\n            this.props.dispatch(action)\n\n            // 単音モードの場合は同じTickの音を消す（遅い実装っぽい、Storeに関数作る？、もしくはindexを取得）\n            if (this.props.isSingle) {\n                // 検索\n                const sameTickEvents = this.props.noteEvents.filter(noteEvent=>(\n                    noteEvent.channel == action.data.channel &&\n                    noteEvent.mea == action.data.mea &&\n                    noteEvent.tick == action.data.tick\n                ))\n\n                // 削除\n                if (sameTickEvents.length > 0) {\n                    sameTickEvents.map((noteEvent)=>{\n                        this.props.dispatch({\n                            type: 'DEL_EVENT',\n                            data: {\n                                channel: this.props.channel,    \n                                mea: this.props.mea,\n                                tick: tick,\n                                note: noteEvent.note\n                            }\n                        })\n                    })\n                }\n            }\n\n            if (this.props.isPreview) {\n                // プレビュー前にNoteOffする\n                this.props.dispatch({\n                    type: 'ALL_NOTE_OFF'\n                })\n                \n                // 音をプレビューする\n                this.props.dispatch({\n                    type: 'NOTE_ON',\n                    data: {\n                        channel: this.props.channel,\n                        note: note,\n                        gateMs: 200,\n                        vel: 100\n                    }\n                })\n            }\n        }\n    }\n\n    constructor(props){\n        super(props)\n\n        // ステートの設定\n        this.state = {\n            selected: false\n        }\n        \n        this.doClick = this.doClick.bind(this)\n        this.doMouseEnter = this.doMouseEnter.bind(this)\n    }\n    \n\n    render() {\n        let noteNum = this.props.row\n        let tick = this.props.col\n\n        // イベントを検索し、見つけたらtrueとする（なんか遅くなりそうな実装）\n        let findData = this.props.noteEvents.find(noteEvent=> (\n            noteEvent.channel == this.props.channel &&\n            noteEvent.mea == this.props.mea &&\n            noteEvent.note == noteNum &&\n            noteEvent.tick == tick\n        ))\n        if (findData === undefined) this.state.selected = false\n        else this.state.selected = true\n\n        return (\n            <td style={this.state.selected ? this.tdSelected : this.tdUnselected}\n            onClick={this.doClick} onMouseEnter={this.doMouseEnter} data-row={noteNum} data-col={tick}>\n                <div style={this.border}></div>\n            </td>\n        )\n    }\n}\n\nexport default connect(state=>state)(PianoRollCell)\n","import React, { Component } from 'react'\nimport PianoRollCell from './PianoRollCell'\nimport { connect } from 'react-redux'\nimport Lib from './Lib'\n\nclass PianoRoll extends Component {\n    // div全体（スクロールできる）\n    box = {\n        height: '500px',\n        overflow: 'auto',\n        cursor: 'pointer',\n        userSelect: 'none'\n    }\n    th = {\n        width: '100px'\n    }\n    \n    changeBaseKey(e) { this.setState({baseNote: e.target.value}) }\n    changeMea(e) { \n        this.props.dispatch({type: 'MOVE_MEA', mea: e.target.value}) \n    }\n    changeSingle(e) {this.setState({isSingle: e.target.checked})}\n    changePreview(e) {this.setState({isPreview: e.target.checked})}\n\n    constructor(props){\n        super(props)\n\n        // ステートの設定\n        this.state = {\n            width : 16,\n            height : 13,\n            baseNote: 72,\n            isSingle: true, // 単音モード\n            isPreview: true, // プレビューするかどうか\n        }\n        \n        this.changeBaseKey = this.changeBaseKey.bind(this)\n        this.changeMea = this.changeMea.bind(this)\n        this.changeSingle = this.changeSingle.bind(this)\n        this.changePreview = this.changePreview.bind(this)\n        this.rollStyle = this.rollStyle.bind(this)\n\n        this.ref = React.createRef()\n    }\n\n    // 読み込み時にピアノロールの中央までスクロールを行う\n    componentDidMount() {\n        this.ref.current.scrollIntoView({\n            block: 'center'\n        })\n    }\n\n    // スケールによってピアノロールの色を変える\n    rollStyle(note) {\n        // スケール（とりあえず、ダイアトニック）\n        const scale = [1,0,1,0,1,1,0,1,0,1,0,1]\n        // スケール外の音\n        const tr_outScale = { background: 'whitesmoke' }\n        // スケール内の音\n        const tr_onScale = { background: 'white' }\n        // 現在の調の音\n        const tr_baseKey = { background: 'mistyrose' }\n        // オフセット\n        const offset = (note - this.state.baseNote + 120) % 12\n\n        if (offset == 0) return tr_baseKey\n        if (scale[offset]) return tr_onScale\n        else return tr_outScale\n    }\n\n    render() {\n        // ダミーの数値（Reactのkeyのため必要？）\n        const notes = []\n        for (let i = 127; i >= 0; i--) {\n            notes.push(i)\n        }\n        const ticks = []\n        for (let i = 1; i <= 16; i++) {\n            ticks.push(i)\n        }\n\n        // ピアノロール生成\n        const rows = notes.map((fuga, indexRow) => {\n            const note = 127 - indexRow\n            return (\n                <tr key={fuga} style={this.rollStyle(note)}>\n                    {/* 音階 */}\n                    <th style={this.th} ref={note == this.state.baseNote ? this.ref : ''}>{Lib.noteNumberToNoteName(note)}</th>\n\n                    {/* 選択できる部分 */}\n                    {ticks.map((hoge, indexCol) => \n                        <PianoRollCell key={hoge} row={note} col={indexCol} isSingle={this.state.isSingle} isPreview={this.state.isPreview} />\n                    )}\n                </tr>\n            )\n        })\n\n        return (\n            <div>\n                {/* ピアノロール表示 */}\n                <div style={this.box}>\n                <table className=\"table table-bordered table-sm\"><tbody>\n                    {rows}\n                </tbody></table>\n                </div>\n\n                {/* 操作部 */}\n                <p>\n                    {/* 調性 */}\n                    <label>Key: </label>\n                    <input type=\"number\" value={this.state.baseNote} min=\"12\" max=\"127\" onChange={(this.changeBaseKey)} />\n                    ({Lib.noteNumberToNoteName(this.state.baseNote)})\n\n                    {/* 小節 */}\n                    <label>Mea: </label>\n                    <input type=\"number\" value={this.props.mea} min=\"1\" max=\"127\" onChange={this.changeMea} />\n\n                    {/* 単音モードボタン */}\n                    <label>Single: </label>\n                    <input type=\"checkbox\" id=\"single\" onChange={this.changeSingle} checked={this.state.isSingle} />\n\n                    {/* プレビューボタン */}\n                    <label>Preview: </label>\n                    <input type=\"checkbox\" id=\"single\" onChange={this.changePreview} checked={this.state.isPreview} />\n                </p>\n\n                \n            </div>\n        )\n    }\n}\n\nexport default connect(state=>state)(PianoRoll)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Lib from './Lib'\n\nclass NotePane extends Component {\n    box = {\n        height: '500px',\n        overflow: 'auto'\n    }\n\n    doClick(e) {\n    }\n\n    constructor(props){\n        super(props)\n\n        // ステートの設定\n        this.state = {\n        }\n        \n        this.doClick = this.doClick.bind(this)\n    }\n\n    render() {\n        // 現在のチャンネルのイベントのみを取り出す\n        const channelItem = this.props.noteEvents.filter(noteEvent=>{\n            return noteEvent.channel == this.props.channel\n        })\n\n        // ペインに表示されるテーブルを生成\n        const noteItem = channelItem.map((noteEvent, index)=>(\n            <tr key={index}>\n                <td>{noteEvent.mea}</td>\n                <td>{noteEvent.tick}</td>\n                <td>{Lib.noteNumberToNoteName(noteEvent.note)}</td>\n                <td>{noteEvent.gate}</td>\n                <td>{noteEvent.vel}</td>\n            </tr>\n        ))\n\n        return (\n            <div style={this.box}>\n                <table className=\"table table-sm\">\n                    <thead>\n                        <tr>\n                            <th>Mea</th>\n                            <th>Tick</th>\n                            <th>Event</th>\n                            <th>Gate</th>\n                            <th>Vel/Value</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {noteItem}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n}\n\nexport default connect(state=>state)(NotePane)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Conductor from './Conductor'\nimport Instrument from './Instrument'\n\nclass Player extends Component {\n\n    constructor(props){\n        super(props)\n\n        // ステートの設定\n        this.state = {\n        }\n        \n    }\n\n    render() {\n        return <div>\n        </div>\n    }\n}\n\nexport default connect(state=>state)(Player)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {Player} from './Player'\nimport Lib from './Lib'\nimport { findDOMNode } from 'react-dom'\n\nclass Conductor extends Component {\n    th = {\n        width: '100px'\n    }\n    td = {\n        width: '50px'\n    }\n    tdNow = {\n        width: '50px',\n        background: 'yellow'\n    }\n    maxTick = 16\n\n    PlayToggle() {\n        if (this.state.isPlaying) {\n            this.setState({isPlaying: false})\n            clearTimeout(this.timer)\n        }\n        else {\n            this.setState({isPlaying: true})\n            this.Play()\n            this.timer = setTimeout(this.Proceed,  240 * 1000 / this.state.bpm / this.maxTick )\n        }\n    }\n\n    Play() {\n        // このタイミングで演奏する？ それともストアでやらせるか？\n        // noteを検索\n        const data = this.props.noteEvents.filter(noteEvent=>{\n            if (this.state.isSolo) {\n                return noteEvent.channel == this.props.channel && noteEvent.mea == this.props.mea && noteEvent.tick == this.state.nowTick\n            }\n            else return noteEvent.mea == this.props.mea && noteEvent.tick == this.state.nowTick\n        })\n\n        // 該当するデータがあれば\n        if (data.length > 0) {\n            // 音を鳴らす\n            data.map(d => {\n                this.props.dispatch({\n                    type: 'NOTE_ON',\n                    data: {\n                        note: d.note,\n                        gateMs: 240 * 1000 / this.state.bpm * (d.gate / (480 * 4)) - 1,\n                        vel: d.vel,\n                    }\n                })\n            })\n        }\n    }\n\n    // tickが進むごとに実行される関数\n    Proceed() {\n        // 小節の最後までTickが進んだらmeaを進める\n        let nextTick = this.state.nowTick + 1\n        if (nextTick == this.maxTick) {\n            nextTick %= this.maxTick\n            if (!this.state.isLoop) {\n                // なぜか遅れる（要対処！！！！）\n                this.props.dispatch({ type:'MOVE_MEA', mea: this.props.mea*1 +1 })\n            }\n        }\n        this.setState({ nowTick: nextTick })\n        \n        this.Play()\n        \n        // 小節の終わりの一個前のtickに来たら、delayTimeを少し短くする（無理やりな実装）\n        let delayTime = 240 * 1000 / this.state.bpm / this.maxTick\n        if (nextTick == this.maxTick - 1 && !this.state.isLoop) delayTime -= 80\n        \n        this.timer = setTimeout(this.Proceed, delayTime )\n    }\n\n    ChangeBPM(e) {\n        this.setState({bpm: e.target.value})\n    }\n\n    ChangeLoop(e) {\n        this.setState({isLoop: e.target.checked})\n    }\n\n    ChangeSolo(e) {\n        this.setState({isSolo: e.target.checked})\n    }\n    ChangeTick(e) {\n        this.setState({nowTick: e.target.getAttribute('data-tick')*1})\n    }\n\n    constructor(props){\n        super(props)\n\n        // ステートの設定\n        this.state = {\n            bpm : 60,\n            nowTick: 0,\n            isPlaying: false, // 再生中かどうか\n            isLoop: true, // ループするかどうか\n            isSolo: false // ソロ演奏するかどうか\n        }\n        \n        this.PlayToggle = this.PlayToggle.bind(this)\n        this.Proceed = this.Proceed.bind(this)\n        this.ChangeBPM = this.ChangeBPM.bind(this)\n        this.ChangeLoop = this.ChangeLoop.bind(this)\n        this.ChangeSolo = this.ChangeSolo.bind(this)\n        this.ChangeTick = this.ChangeTick.bind(this)\n    }\n\n    render() {\n        let ticks = []\n        for (let i = 0; i < this.maxTick; i++) {\n            ticks.push(<td key={i} data-tick={i} onClick={this.ChangeTick} style={this.state.nowTick == i ? this.tdNow : this.td}></td>)\n        }\n\n        return (\n            <div>\n                <p>\n                    {/* 再生・停止ボタン（別コンポーネントのほうがいい？） */}\n                    <input type=\"number\" value={this.state.bpm} min=\"0\" max=\"300\" onChange={this.ChangeBPM} />\n                    <button className=\"btn btn-primary\" onClick={this.PlayToggle}>\n                        {this.state.isPlaying ? 'Playing' : 'Play'}\n                    </button>\n\n                    {/* ループボタン */}\n                    <label>Loop: </label>\n                    <input type=\"checkbox\" id=\"loop\" onChange={this.ChangeLoop} checked={this.state.isLoop}/>\n\n                    {/* ソロボタン */}\n                    <label>Solo: </label>\n                    <input type=\"checkbox\" id=\"solo\" onChange={this.ChangeSolo} checked={this.state.isSolo}/>\n                </p>\n\n                {/* シーケンスクリック（横に流れていくやつ）表示 */}\n                <table className=\"table table-bordered table-sm\"><tbody><tr>\n                    <th style={this.th}>4/4</th>\n                    {ticks}\n                </tr></tbody></table>\n            </div>\n        )\n    }\n}\n\nexport default connect(state=>state)(Conductor)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nclass ChannelSelector extends Component {\n\n    // テストで音を鳴らす\n    ChangeSelector(e) {\n        this.props.dispatch({\n            type: 'MOVE_CHANNEL',\n            channel: e.target.value*1\n        })\n    }\n\n    constructor(props){\n        super(props)\n        this.channelName = ['Piano', 'Bass', 'Drums']\n\n        // ステートの設定\n        this.state = {\n        }\n\n        this.ChangeSelector = this.ChangeSelector.bind(this)\n    }\n\n    render() {\n        // セレクトタグの内容を作る\n        let n = 0\n        let items = this.channelName.map(value =>\n            <option key={n} value={n}>Ch.{n++} {value}</option> \n        )\n\n        return (\n        <div>\n            <select onChange={this.ChangeSelector} defaultValue=\"-1\">{ items }</select>\n        </div>\n        )\n    }\n}\n\nexport default connect(state=>state)(ChannelSelector)\n","import React, { Component } from 'react'\nimport PianoRoll from './PianoRoll'\nimport NotePane from './NotePane'\nimport { connect } from 'react-redux'\nimport Conductor from './Conductor'\nimport Player from './Player'\nimport ChannelSelector from './ChannelSelector'\n\nclass Sequencer extends Component {\n    doClick(e) {\n        this.props.dispatch({\n            type: 'DEL_ALL'\n        })\n    }\n\n    constructor(props){\n        super(props)\n\n        // ステートの設定\n        this.state = {\n        }\n        \n        this.doClick = this.doClick.bind(this)\n    }\n\n\n\n    render() {\n        return <div>\n            <div className='row mt-4'>\n                <div className='col-md-3'>\n                    <ChannelSelector />\n                    <NotePane />\n                </div>\n                <div className='col-md-9'>\n                    <Conductor />\n                    <PianoRoll />\n                </div>\n                <Player />\n            </div>\n            \n            <div className='row'>\n                <button className='btn btn-danger' onClick={this.doClick}>Del All Event</button>\n            </div>\n        </div>\n    }\n}\n\nexport default connect(state=>state)(Sequencer)\n","import './App.css'\nimport React, { Component } from 'react'\nimport Instrument from './midip/Instrument'\nimport Sequencer from './midip/Sequencer'\nimport { Provider } from 'react-redux'\nimport MidipStore, { midipReducer } from './midip/Store'\nimport { createStore } from 'redux'\n\nimport { persistStore, persistReducer } from 'redux-persist'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport storage from 'redux-persist/lib/storage'\n\n// Redux Persistの設定\nconst persistConfig = {\n    key: 'midip',\n    storage: storage,\n    blacklist: ['output'],\n    whitelist: ['noteEvents']\n}\n\n// パーシストレデューサの設定\nconst persistedReducer = persistReducer(persistConfig, midipReducer)\n\n// ストア、パーシスタの作成\nlet store = createStore(persistedReducer)\nlet pstore = persistStore(store)\n\nclass App extends Component {\n    constructor(props){\n        super(props)\n    }\n\n    render() {\n    return (\n        <div className=\"container-fluid\">\n            <Provider store={store}>\n                <PersistGate loading={<p>loading...</p>} persistor={pstore}>\n                    <Sequencer />\n                    <hr />\n                    <Instrument />\n                </PersistGate>\n            </Provider>\n\n            <hr />\n\n            <h4>Memo</h4>\n            <li><a href=\"https://github.com/syun560/midip2021\">GitHub</a></li>\n\n            <h5>目的</h5>\n            <li>自動耳コピ</li>\n            <li>公開、使ってもらえること</li>\n            <li>タブ譜作成</li>\n            <li>MIDI出力</li>\n            <li></li>\n\n            <li>コンソールにMIDIメッセージは出力できているので、インタラクティブな出力をする</li>\n            \n            <li>Program Changeのイベントも送信できるようにしよう、セレクトタグか？</li>\n\n            <li>キーボードショートカット</li>\n\n            <h4>参考</h4>\n            <li><a href=\"http://www.yk.rim.or.jp/~kamide/music/chordhelper/\">MIDI Chord Helper</a></li>\n            <li><a href=\"https://musiclab.chromeexperiments.com/Song-Maker/song/5766211904733184\">Song Maker</a></li>\n            <li>KORG-DS-10</li>\n            \n        </div>\n    )\n    }\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}