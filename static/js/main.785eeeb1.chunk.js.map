{"version":3,"sources":["midip/Instrument.js","midip/Store.js","midip/PianoRollElement.js","midip/PianoRoll.js","midip/NotePane.js","midip/Player.js","midip/Conductor.js","midip/Sequencer.js","App.js","reportWebVitals.js","index.js"],"names":["Instrument","props","state","message","inPorts","outPorts","selectedOutPortID","selectedInPortID","navigator","requestMIDIAccess","sysex","then","midiAccess","inputIterator","inputs","values","input","next","done","value","push","name","ID","id","addEventListener","inputEvent","length","setState","outputs","output","device","console","log","msg","doClick","bind","doChange","e","target","numArray","data","forEach","val","toString","join","this","send","get","window","performance","now","n","in_items","map","out_items","onChange","defaultValue","className","onClick","Component","initData","noteEvents","sortNotes","arr","sort","a","b","tick","note","createStore","action","type","new_data","slice","del_data","filter","noteEvent","mea","PianoRollElement","tdUnselected","width","tdSelected","background","selected","row","getAttribute","col","dispatch","gate","vel","noteNum","findData","find","undefined","style","data-row","data-col","connect","PianoRoll","th","height","baseNote","num","ticks","rows","indexRow","hoge","indexCol","NotePane","box","overflow","noteItem","index","Player","alert","Conductor","td","tdNow","maxTick","bpm","nowTick","isPlaying","Play","Proceed","ChangeBPM","clearTimeout","timer","setTimeout","i","min","max","Sequencer","App","store","MidipStore","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.785eeeb1.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Col } from 'react-bootstrap';\n\nclass Instrument extends Component {\n\n    // Inputを受け取ったときのイベント\n    inputEvent(e) {\n        let target = e.target;\n        let message = '';\n        let numArray = [];\n        // 2桁の16進数にして表示する\n        // リアルタイムメッセージ（f8 or feは無視、なんとかして消したい）\n        e.data.forEach(val=> {\n            // if (val == 0xf8 || val == 0xfe) return\n            // numArray.push(('00' + val.toString(16)).substr(-2)); // 謎\n            numArray.push(val.toString(16))\n        });\n        if (numArray[0] == 'f8' || numArray[0] == 'fe') return \n        message = numArray.join(' ');\n        \n        // 選択中のDeviceに結果を送信する\n        this.state.outPorts[0].device.send(e.data);\n\n        // 2桁の16進数を表示\n        console.log(message);\n    }\n\n    // アウトプットセレクトタグが変化した場合\n    doChange(e) {\n        this.setState({ selectedOutPortID : e.target.value })\n    }\n\n    // テストで音を鳴らす\n    doClick() {\n        // 出力先の MIDI ポートを取得\n        const output = this.outputs.get(this.state.selectedOutPortID);\n\n        // MIDI メッセージを送信\n        output.send([0x90, 60, 100]);                                       // ノートオン\n        output.send([0x80, 60, 100], window.performance.now() + 500);      // 1秒後にノートオフ\n        // MIDI メッセージを送信\n        output.send([0x90, 64, 100]);                                       // ノートオン\n        output.send([0x80, 64, 100], window.performance.now() + 500);      // 1秒後にノートオフ\n        // MIDI メッセージを送信\n        output.send([0x90, 67, 100]);                                       // ノートオン\n        output.send([0x80, 67, 100], window.performance.now() + 500);      // 1秒後にノートオフ\n    }\n\n    constructor(props){\n        super(props)\n\n        // ステートの設定\n        this.state = {\n            message: 'please wait...',\n            inPorts: [],\n            outPorts: [],\n            selectedOutPortID: '',\n            selectedInPortID: '',\n        }\n        \n        navigator.requestMIDIAccess({sysex: false}).then(\n            // 通信成功時\n            (midiAccess) => {                \n                // InPortの取得、設定\n                let inputIterator = midiAccess.inputs.values();\n                let inPorts = []\n                for (let input = inputIterator.next(); !input.done; input = inputIterator.next()) {\n                    let value = input.value;\n                    inPorts.push({\n                        name: value.name,\n                        ID: value.id\n                    })\n                    // イベント登録\n                    value.addEventListener('midimessage', this.inputEvent, false);\n                }\n                if (inPorts.length) this.setState({ selectedInPortID: inPorts[0].ID })\n                this.setState({ inPorts: inPorts })\n\n                // OutPortの取得、設定\n                let outPorts = []\n                this.outputs = midiAccess.outputs\n                for (let output of this.outputs.values()) {\n                    outPorts.push({\n                        device: output,\n                        name: output.name,\n                        ID: output.id\n                    })\n                }\n                if (outPorts.length) this.setState({ selectedOutPortID: outPorts[0].ID })\n                this.setState({ outPorts: outPorts })\n                \n                console.log(\"MIDI READY!!!\");\n                this.setState({message: \"MIDI READY\"})\n            },\n            // 通信失敗時\n            (msg) => {\n                console.log(\"MIDI FAILED - \" + msg);\n            }\n        )\n\n        this.doClick = this.doClick.bind(this)\n        this.doChange = this.doChange.bind(this)\n        this.inputEvent = this.inputEvent.bind(this)\n    }\n\n    render() {\n        // セレクトタグの内容を作る\n        let n = 0\n        let in_items = this.state.inPorts.map(value =>\n            <option key={n++} value={value.ID}>{value.name} ({value.ID})</option> \n            )\n        let out_items = this.state.outPorts.map(value =>\n            <option key={n++} value={value.ID}>{value.name} ({value.ID})</option> \n            )\n\n        return (\n        <div>\n            <p>{this.state.message}</p>\n            \n            <table><tbody>\n                <tr><td>Input: </td><td><select>{ in_items }</select></td></tr>\n                <tr><td>Output: </td><td><select onChange={this.doChange} defaultValue=\"-1\">{ out_items }</select></td></tr>\n            </tbody></table>\n            \n            <button className=\"btn btn-primary btn-large\" onClick={this.doClick}>Play C</button>\n            \n        </div>\n        )\n    }\n}\n\nexport default Instrument\n","import  { createStore } from 'redux'\nimport { ActionCreators } from 'redux-devtools'\n\n// 初期値\nconst initData = {\n    noteEvents: [\n        \n    ]\n}\n\n// 配列のソート\nfunction sortNotes(arr) {\n    arr.sort((a, b) => {\n        a *= 1\n        b *= 1\n        if (a.tick < b.tick) return -1\n        if (a.tick > b.tick) return 1\n        if (a.note < b.note) return -1\n        if (a.note > b.note) return 1\n        return 0\n    })\n}\n\n// レデューサ\nexport function midipReducer(state=initData, action) {\n    switch(action.type) {\n    case 'ADD_EVENT':\n        let new_data = state.noteEvents.slice()\n        new_data.push(action.data)\n        sortNotes(new_data)\n        return {\n            noteEvents: new_data\n        }\n    case 'DEL_EVENT':\n        let del_data = state.noteEvents.filter(\n            noteEvent=>(\n                noteEvent.mea != action.data.mea ||\n                noteEvent.tick != action.data.tick ||\n                noteEvent.note != action.data.note\n            )\n        )\n        return {\n            noteEvents: del_data\n        }\n    case 'DEL_ALL':\n        return {\n            noteEvents: initData.noteEvents\n        }\n    default: \n        return state\n    }\n}\n\n// 追加のアクション\nexport function addEvent(data) {\n    return {\n        type: 'ADD_EVENT',\n        data: data\n    }\n}\n\n// ストアを作成\nexport default createStore(midipReducer)","import React, { Component } from 'react'\nimport { addEvent } from './Store'\nimport { connect } from 'react-redux'\n\nclass PianoRollElement extends Component {\n    tdUnselected = {\n        width: '50px'\n    }\n    tdSelected = {\n        width: '50px',\n        background: 'cyan'\n    }\n\n    doClick(e) {\n        let row = e.target.getAttribute('data-row')\n        let col = e.target.getAttribute('data-col')\n        this.setState(state => ({selected: !state.selected}))\n        // console.log(row + ', ' + col + ' ' + this.state.selected)\n\n        if (this.state.selected){\n            this.props.dispatch({\n                type: 'DEL_EVENT',\n                data: {\n                    mea: 1,\n                    tick: col,\n                    note: row\n                }\n            })\n        }\n        else {\n            let action = addEvent({\n                mea: 1,\n                tick: col,\n                note: row,\n                gate: 480,\n                vel: 100\n            })\n            this.props.dispatch(action)\n        }\n    }\n\n    constructor(props){\n        super(props)\n\n        // ステートの設定\n        this.state = {\n            selected: false\n        }\n        \n        this.doClick = this.doClick.bind(this)\n    }\n\n    // Paneに格納されているデータと連動する\n    \n\n    render() {\n        let noteNum = this.props.row\n        let tick = this.props.col\n\n        // イベントを検索し、見つけたらtrueとする（なんか遅くなりそうな実装）\n        let findData = this.props.noteEvents.find(noteEvent=> (\n            noteEvent.note == noteNum && noteEvent.tick == tick\n        ))\n        if (findData === undefined) this.state.selected = false\n        else this.state.selected = true\n\n        return (\n            <td style={this.state.selected ? this.tdSelected : this.tdUnselected}\n            onClick={this.doClick} data-row={noteNum} data-col={tick}></td>\n        )\n    }\n}\n\nexport default connect(state=>state)(PianoRollElement)\n","import React, { Component } from 'react'\nimport PianoRollElement from './PianoRollElement'\n//import { connect } from 'react-redux'\n\nclass PianoRoll extends Component {    \n    th = {\n        width: '100px'\n    }\n    \n    // アウトプットセレクトタグが変化した場合\n    doClick(e) {\n    }\n\n    // ノートネーム（数字）をテキスト変換する関数\n    noteNumberToNoteName(num) {\n\n    }\n\n    constructor(props){\n        super(props)\n\n        // ステートの設定\n        this.state = {\n            width : 16,\n            height : 13,\n            baseNote: 72,\n        }\n        \n        this.doClick = this.doClick.bind(this)\n    }\n\n    render() {\n        const notes = ['C5','B4','A#4','A4','G#4','G4', 'F#4', 'F4', 'E4', 'D#4', 'D4', 'C#4', 'C4']\n\n        const notes_name = ['C','B','A#','A','G#','G', 'F#', 'F', 'E', 'D#', 'D', 'C#']\n\n        // ノートネームを作成\n        const ticks = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\n\n        let n = this.state.baseNote\n        \n        const rows = notes.map((note, indexRow) => (\n            <tr key={note}>\n                <th style={this.th}>{note}</th>\n                {ticks.map((hoge, indexCol) => \n                    <PianoRollElement key={hoge} row={n - indexRow} col={indexCol} />\n                )}\n            </tr>\n        ))\n\n        return (\n            <table className=\"table table-bordered table-sm\"><tbody>\n                {rows}\n            </tbody></table>\n        )\n    }\n}\n\n//export default connect(state=>state)(PianoRoll)\nexport default PianoRoll\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nclass NotePane extends Component {\n    box = {\n        height: '500px',\n        overflow: 'auto'\n    }\n\n    doClick(e) {\n    }\n\n    constructor(props){\n        super(props)\n\n        // ステートの設定\n        this.state = {\n        }\n        \n        this.doClick = this.doClick.bind(this)\n    }\n\n    render() {\n\n        const noteItem = this.props.noteEvents.map((noteEvent, index)=>(\n            <tr key={index}>\n                <td>{noteEvent.mea}</td>\n                <td>{noteEvent.tick}</td>\n                <td>{noteEvent.note}</td>\n                <td>{noteEvent.gate}</td>\n                <td>{noteEvent.vel}</td>\n            </tr>\n        ))\n\n        return (\n            <div style={this.box}>\n            <table className=\"table table-sm\">\n                <thead>\n                    <tr>\n                        <th>Mea</th>\n                        <th>Tick</th>\n                        <th>Event</th>\n                        <th>Gate</th>\n                        <th>Vel/Value</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {noteItem}\n                </tbody>\n            </table>\n            </div>\n        )\n    }\n}\n\nexport default connect(state=>state)(NotePane)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Conductor from './Conductor'\nimport Instrument from './Instrument'\n\nclass Player extends Component {\n\n    constructor(props){\n        super(props)\n\n        // ステートの設定\n        this.state = {\n        }\n        \n    }\n    Play() {\n        alert('Playうんち')\n    }\n\n    render() {\n        return <div>\n            <p>プレイヤーにござる</p>\n            <p>コンダクターからのメッセージを手に入れる。</p>\n            <p>// noteを検索</p>\n            <p>// 音を鳴らす</p>\n        </div>\n    }\n}\n\nexport default connect(state=>state)(Player)\n","import React, { Component } from 'react'\n//import { connect } from 'react-redux'\nimport {Player} from './Player'\n\nclass Conductor extends Component {\n    th = {\n        width: '100px'\n    }\n    td = {\n        width: '50px'\n    }\n    tdNow = {\n        width: '50px',\n        background: 'yellow'\n    }\n    maxTick = 16\n\n    Play() {\n        if (this.state.isPlaying) {\n            this.setState({isPlaying: false})\n            clearTimeout(this.timer)\n        }\n        else {\n            this.setState({isPlaying: true})\n            this.timer = setTimeout(this.Proceed,  4800 * 2 / this.state.bpm )\n        }\n    }\n\n    Proceed() {\n        // このタイミングで演奏する？\n        // noteを検索\n        // 音を鳴らす\n    \n        this.setState( state=> ({\n            nowTick: (state.nowTick + 1) % this.maxTick\n        }))\n        this.timer = setTimeout(this.Proceed, 4800 * 2 / this.state.bpm )\n    }\n\n    ChangeBPM(e) {\n        this.setState({bpm: e.target.value})\n    }\n\n    constructor(props){\n        super(props)\n\n        // ステートの設定\n        this.state = {\n            bpm : 120,\n            nowTick: 0,\n            isPlaying: false\n        }\n        \n        this.Play = this.Play.bind(this)\n        this.Proceed = this.Proceed.bind(this)\n        this.ChangeBPM = this.ChangeBPM.bind(this)\n    }\n\n    render() {\n        let ticks = []\n        for (let i = 0; i < this.maxTick; i++) {\n            ticks.push(<td key={i} style={this.state.nowTick == i ? this.tdNow : this.td}></td>)\n        }\n\n        return (\n            <div>\n                <p>\n                    <input type=\"number\" value={this.state.bpm} min=\"0\" max=\"300\" onChange={this.ChangeBPM} />\n                    <button className=\"btn btn-primary\" onClick={this.Play}>\n                        {this.state.isPlaying ? 'Playing' : 'Play'}\n                    </button>\n                </p>\n                <table className=\"table table-bordered table-sm\"><tbody><tr>\n                    <th style={this.th}>4/4</th>\n                    {ticks}\n                </tr></tbody></table>\n            </div>\n        )\n    }\n}\n\n//export default connect(state=>state)(PianoRoll)\nexport default Conductor\n","import React, { Component } from 'react'\nimport PianoRoll from './PianoRoll'\nimport NotePane from './NotePane'\nimport { connect } from 'react-redux'\nimport Conductor from './Conductor'\nimport Player from './Player'\n\nclass Sequencer extends Component {\n    doClick(e) {\n        this.props.dispatch({\n            type: 'DEL_ALL'\n        })\n    }\n\n    constructor(props){\n        super(props)\n\n        // ステートの設定\n        this.state = {\n        }\n        \n        this.doClick = this.doClick.bind(this)\n    }\n\n    render() {\n        return <div>\n            <div className='row mt-4'>\n                    <div className='col-md-3'>\n                        <NotePane />\n                    </div>\n            \n                    <div className='col-md-9'>\n                        <Conductor />\n                        <PianoRoll />\n                    </div>\n                <Player />\n            </div>\n            \n            <div className='row'>\n                <button className='btn btn-danger' onClick={this.doClick}>すべて削除</button>\n            </div>\n        </div>\n    }\n}\n\nexport default connect(state=>state)(Sequencer)\n","import './App.css'\nimport React, { Component } from 'react'\nimport Instrument from './midip/Instrument'\nimport Sequencer from './midip/Sequencer'\nimport { Provider } from 'react-redux'\nimport MidipStore from './midip/Store'\n\nclass App extends Component {\n    constructor(props){\n        super(props)\n    }\n\n    render() {\n    return (\n        <div className=\"container-fluid\">\n\n            <Provider store={MidipStore}>\n                <Sequencer />\n            </Provider>\n\n            <hr />\n\n            <Instrument />\n\n            <hr />\n\n            <h4>メモ</h4>\n            <li><a href=\"https://github.com/syun560/midip2021\">GitHub</a></li>\n\n            <li>Instrument.jsが少し複雑な気がする</li>\n            <li>コンソールにMIDIメッセージは出力できているので、インタラクティブな出力をする</li>\n            \n            <li>Outputが複数ある状況の再現はどうしたらいい？</li>\n            <li>Program Changeのイベントも送信できるようにしよう、セレクトタグか？</li>\n\n            <li>ある程度キーボード操作もできるようにしておく</li>\n        </div>\n    )\n    }\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}