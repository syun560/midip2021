{"version":3,"sources":["midip/Store.js","midip/Lib.js","midip/components/ChordPlayerCell.js","midip/components/ChordPlayer.js","midip/components/Instrument.js","midip/components/PianoRollCell.js","midip/components/PianoRoll.js","midip/components/ChordRollCell.js","midip/components/ChordRoll.js","midip/components/NotePane.js","midip/components/Conductor.js","midip/components/ChannelSelector.js","midip/components/ProgramChanger.js","midip/components/SongSelector.js","midip/components/SaveDialog.js","midip/components/SMFWriter.js","midip/components/Sequencer.js","App.js","reportWebVitals.js","index.js"],"names":["initData","songs","id","name","updated","author","channelData","program","noteEvents","chordEvents","tempo","finalMea","output","mea","nowTick","channel","sortNotes","arr","sort","a","b","tick","note","midipReducer","state","action","type","new_data","slice","push","data","del_data","filter","noteEvent","sl","ch","undefined","send","vel","window","performance","now","gateMs","map","index","num","programNumber","newChannelData","newChannel","length","console","log","d","Date","date","getFullYear","getMonth","getDay","getHours","getMinutes","newSongs","newSong","foundSong","find","song","createStore","Lib","base","Math","floor","toString","chordPattern","baseName","chordName","substr","baseNote","indexOf","chord","offset","programName","ChordPlayerCell","props","doClick","bind","this","chordNameToNoteEvents","dispatch","style","diff","nowKey","background","cursor","onClick","Component","connect","ChordPlayer","circleOfFifthKey","circleOfFifthMajor","circleOfFifthMinor","createStyle","e","key","target","getAttribute","setState","item0","data-key","item1","isSeventh","item2","className","Instrument","message","inPorts","outPorts","selectedOutPortID","selectedInPortID","navigator","requestMIDIAccess","sysex","then","midiAccess","inputIterator","inputs","values","input","next","done","value","ID","addEventListener","inputEvent","outputs","device","get","msg","doChange","numArray","forEach","val","join","n","in_items","out_items","onChange","defaultValue","PianoRollCell","selected","doMouseEnter","isSingle","buttons","gate","sameTickEvents","isPreview","noteNum","row","col","findData","td","width","borderLeft","onMouseEnter","data-row","data-col","PianoRoll","box","height","overflow","userSelect","th","changeBaseKey","changeMea","changeSingle","changePreview","rollStyle","ref","React","createRef","checked","current","scrollIntoView","block","notes","i","ticks","roll","fuga","indexRow","noteNumberToNoteName","hoge","indexCol","min","max","ChordRollCell","ChangeChord","chordEvent","ChordRoll","clicker","overflowY","maxTick","NotePane","noteItem","Conductor","tdNow","bpm","isPlaying","isLoop","isSolo","PlayToggle","Proceed","ChangeBPM","ChangeLoop","ChangeSolo","ChangeTick","clearTimeout","timer","Play","setTimeout","nextTick","delayTime","data-tick","ChannelSelector","ChangeSelector","AddChannel","items","ProgramChanger","SongSelector","isModalOpen","selectedID","closeModal","openModal","selectID","openSong","delSong","Button","variant","Modal","show","onHide","Header","closeButton","Title","Body","Footer","SaveDialog","save","preventDefault","onSubmit","placeholder","SMFWriter","SMFWrite","MidiWriter","require","tracks","newTrack","Track","alert","addEvent","ProgramChangeEvent","instrument","NoteEvent","pitch","duration","velocity","writer","Writer","location","href","dataUri","Sequencer","persistConfig","storage","blacklist","whitelist","persistedReducer","persistReducer","store","pstore","persistStore","App","loading","persistor","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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EAAYtE,EAAKuE,OAAO,KAGxBF,EAAWrE,EAAKuE,OAAO,EAAG,GAC1BD,EAAYtE,EAAKuE,OAAO,IAI5B,IACIC,EAAW,GACfA,GAFmB,CAAC,IAAI,KAAK,IAAI,KAAK,IAAI,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,KAEpDC,QAAQJ,GAG/B,IAAIK,EAAQ,GACZ,OAAOJ,GACH,IAAK,GACDI,EAAQN,EACR,MACJ,IAAK,IACDM,EAAQN,EAMhB,IAAI/D,EAAa,GASjB,OARAqE,EAAMlC,KAAI,SAACmC,GACPtE,EAAWqB,KAAK,CACZP,KAAMqD,EAAWG,EACjBxC,IAAK,IACLI,OAAQ,SAITlC,M,KAxDT0D,EA2DKa,YAAc,CACjB,UACA,UACA,UACA,cACA,YACA,YACA,cACA,QACA,UACA,eACA,YACA,aACA,UACA,YACA,gBACA,YACA,UACA,UACA,UACA,aACA,aACA,YACA,YACA,WACA,mBACA,eACA,cACA,eACA,eACA,mBACA,oBACA,eACA,gBACA,gBACA,cACA,gBACA,cACA,cACA,eACA,eACA,SACA,QACA,QACA,aACA,kBACA,oBACA,OACA,UACA,UACA,eACA,kBACA,kBACA,YACA,aACA,YACA,eACA,UACA,WACA,OACA,eACA,eACA,UACA,gBACA,gBACA,cACA,WACA,YACA,eACA,OACA,eACA,UACA,WACA,UACA,QACA,WACA,YACA,cACA,aACA,UACA,UACA,cACA,WACA,iBACA,eACA,UACA,WACA,eACA,cACA,WACA,WACA,YACA,cACA,cACA,YACA,WACA,YACA,WACA,aACA,UACA,cACA,aACA,SACA,aACA,aACA,QACA,QACA,WACA,OACA,UACA,UACA,SACA,SACA,cACA,QACA,cACA,YACA,QACA,cACA,aACA,cACA,eACA,eACA,WACA,OACA,YACA,aACA,WACA,YAKOb,Q,OC5LTc,E,kDA0BF,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAGDzD,MAAQ,GAGb,EAAK0D,QAAU,EAAKA,QAAQC,KAAb,gBAPD,E,2CAvBlB,WAAW,IAAD,OACAN,EAAQO,KAAKH,MAAMJ,M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","file":"static/js/main.68989cdd.chunk.js","sourcesContent":["import  { createStore } from 'redux'\n\n// 初期値\nconst initData = {\n    songs: [\n        {\n            id: 1,\n            name: 'Sample Song',\n            updated: '2021/03/03 22:59',\n            author: 'syun560',\n            channelData: [{\n                program: 0,\n                name: 'Piano'\n            }],\n            noteEvents:[],\n            chordEvents: [],\n            tempo: 12,\n            finalMea: 1\n        }\n    ],\n    chordEvents: [],\n    noteEvents: [],\n    output: null,\n    mea: 1,\n    nowTick: 0,\n    finalMea: 1,\n    channel: 0,\n    channelData: [\n        {\n            program: 0,\n            name: 'Piano'\n        },\n        {\n            program: 0,\n            name: 'Bass'\n        },\n        {\n            program: 0,\n            name: 'Drums'\n        },\n    ]\n}\n\n// 配列のソート\nfunction sortNotes(arr) {\n    arr.sort((a, b) => {\n        if (a.mea < b.mea) return -1\n        if (a.mea > b.mea) return 1\n        if (a.tick < b.tick) return -1\n        if (a.tick > b.tick) return 1\n        if (a.note < b.note) return -1\n        if (a.note > b.note) return 1\n        return 0\n    })\n}\n\n// レデューサ\nexport function midipReducer(state=initData, action) {\n    switch(action.type) {\n    // MIDIイベント管理----------------------------------\n    case 'ADD_EVENT':\n        let new_data = state.noteEvents.slice()\n        new_data.push(action.data)\n        sortNotes(new_data)\n\n        return {\n            ...state,\n            noteEvents: new_data,\n            finalMea: state.mea < action.data.mea ? action.data.mea : state.finalMea\n        }\n    case 'DEL_EVENT':\n        let del_data = state.noteEvents.filter(\n            noteEvent=>(\n                noteEvent.channel != action.data.channel ||\n                noteEvent.mea != action.data.mea ||\n                noteEvent.tick != action.data.tick ||\n                noteEvent.note != action.data.note\n            )\n        )\n        return {\n            ...state,\n            noteEvents: del_data,\n        }\n    case 'DEL_ALL':\n        return {\n            ...state,\n            noteEvents: initData.noteEvents,\n        }\n\n    // コードアノテーション管理-----------------------------\n    case 'ADD_CHORD':\n        const sl = state.chordEvents.slice()\n        sl.push(action.data)\n        return {\n            ...state,\n            chordEvents: sl\n        }\n\n    // MIDIデバイス操作-------------------------------------\n    case 'REGISTER_OUTPUT':\n        return {\n            ...state,\n            output: action.output,\n        }\n    case 'NOTE_ON':\n        {\n            let ch = 0\n            if (action.data.channel === undefined) ch = 0\n            else ch = action.data.channel\n            state.output.send([0x90 + ch, action.data.note, action.data.vel])\n            state.output.send([0x80 + ch, action.data.note, action.data.vel], window.performance.now() + action.data.gateMs);      // 1秒後にノートオフ\n            break\n        }\n    case 'ALL_NOTE_OFF':\n        state.output.send([0xB0, 0x7B, 0])\n        break\n    case 'PROGRAM_SET_ALL':\n        state.channelData.map((ch, index) => state.output.send([0xC0 + index, ch.program]))\n        break\n    case 'PROGRAM_CHANGE':\n        {\n            const ch = state.channel\n            const num = action.programNumber\n            state.output.send([0xC0 + ch, num])\n            let newChannelData = state.channelData.slice()\n            newChannelData[ch].program = num\n            return {\n                ...state,\n                channelData: newChannelData\n            }\n        }\n        \n            \n    // シーケンス操作--------------------------------------\n    case 'MOVE_MEA':\n        let mea = action.mea\n        if (mea > 128) mea = 128\n        if (mea < 1) mea = 1\n        \n        return {\n            ...state,\n            mea: mea,\n        }\n    case 'MOVE_TICK':\n        return {\n            ...state,\n            nowTick: action.nowTick,\n        }\n\n    // チャンネル操作-------------------------------------\n    case 'MOVE_CHANNEL':\n        let channel = action.channel\n        if (channel > 15) channel = 15\n        if (channel < 0) channel = 0\n        return {\n            ...state,\n            channel: channel,\n        }\n    case 'ADD_CHANNEL':\n        let newChannel = state.channelData.length\n        if (newChannel > 15) break\n        console.log(newChannel)\n        let newChannelData = state.channelData.slice()\n        newChannelData.push({\n            program: 0,\n            name: 'Piano'\n        })\n        return {\n            ...state,\n            channelData: newChannelData,\n            channel: newChannel\n        }\n\n    // Song操作-------------------------------------\n    case 'SAVE_SONG':\n        // 日付オブジェクトを文字列にして更新する\n        let d = new Date()\n        let date = d.getFullYear() + '/' + (d.getMonth()+1) + '/' + d.getDay() + ' ' +  d.getHours() + ':' + d.getMinutes()\n\n        // 配列の内容をコピーする\n        let newSongs = state.songs.slice()\n        let newSong = {\n            id: state.songs[state.songs.length - 1].id + 1,\n            name: action.name,\n            updated: date,\n            author: 'anonymous',\n            channelData: state.channelData,\n            noteEvents: state.noteEvents,\n            finalMea: state.finalMea\n        }\n        newSongs.push(newSong)\n\n        return {\n            ...state,\n            songs: newSongs\n        }\n    case 'OPEN_SONG':\n        // 指定されたidの曲を検索\n        let foundSong = state.songs.find(song => song.id === action.id)\n        if (foundSong===undefined) {\n            console.log(\"can't find song of selected ID: \" + action.id)\n            break\n        }\n        // プログラムリセット\n        foundSong.channelData.map((ch, index) => state.output.send([0xC0 + index, ch.program]))\n\n        return {\n            ...state,\n            channelData: [...foundSong.channelData],\n            noteEvents: [...foundSong.noteEvents],\n            finalMea: foundSong.finalMea,\n            mea: initData.mea,\n            channel: initData.channel\n        }\n    case 'DEL_SONG':\n        // 指定されたidの曲を削除\n        return {\n            ...state,\n            songs: state.songs.filter(song => song.id !== action.id),\n        }\n        \n    default: \n        break\n    }\n    return state\n}\n\n\n// 追加のアクション\nexport function addEvent(data) {\n    return {\n        type: 'ADD_EVENT',\n        data: data\n    }\n}\n\n// ストアを作成\nexport default createStore(midipReducer)","class Lib {\n    // ノートナンバー（64）をノート（C5）に変換する\n    static noteNumberToNoteName(num) {\n        const notes_name = ['C','C#','D','D#','E','F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n        const base = Math.floor(num / 12) - 1\n        const offset = num % 12\n        return notes_name[offset] + base.toString()\n    }\n\n    static chordNameToNoteEvents(name) {\n        const chordPattern = {\n            major: [0, 4, 7],\n            minor: [0, 3, 7],\n            major7: [0, 4, 7, 11]\n        }\n\n        // 解析する（splitなどを利用する）\n        let baseName = ''\n        let chordName = ''\n\n        if (name[1] == '#') {\n            baseName = name.substr(0, 2)\n            chordName = name.substr(2)\n        }\n        else {\n            baseName = name.substr(0, 1)\n            chordName = name.substr(1)\n        }\n\n        // ノート取得\n        const notes_name = ['C','C#','D','D#','E','F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n        let baseNote = 60\n        baseNote += notes_name.indexOf(baseName)\n\n        // コード取得\n        let chord = []\n        switch(chordName) {\n            case '':\n                chord = chordPattern.major\n                break\n            case 'm':\n                chord = chordPattern.minor\n                break\n            default:\n                break\n        }\n\n        let noteEvents = []\n        chord.map((offset)=>{\n            noteEvents.push({\n                note: baseNote + offset,\n                vel: 100,\n                gateMs: 500\n            })\n        })\n\n        return noteEvents\n    }\n\n    static programName = [\n        \"Piano 1\",\n        \"Piano 2\",\n        \"Piano 3\",\n        \"Honkey-tonk\",\n        \"E.Piano 1\",\n        \"E.Piano 2\",\n        \"Harpsichord\",\n        \"Clav.\",\n        \"Celesta\",\n        \"Glockenspiel\",\n        \"Music Box\",\n        \"Vibraphone\",\n        \"Marimba\",\n        \"Xylophone\",\n        \"Tubular Bells\",\n        \"Dulcrimer\",\n        \"Organ 1\",\n        \"Organ 2\",\n        \"Organ 3\",\n        \"Pipe Organ\",\n        \"Reed Organ\",\n        \"Accordion\",\n        \"Harmonica\",\n        \"Bandneon\",\n        \"Nylon-str.Guitar\",\n        \"Steel-str.Gt\",\n        \"Jazz Guitar\",\n        \"Clean Guitar\",\n        \"Muted Guitar\",\n        \"Overdrive Guitar\",\n        \"Distortion Guitar\",\n        \"Gt.Harmonics\",\n        \"Acoustic Bass\",\n        \"Fingered Bass\",\n        \"Picked Bass\",\n        \"Fretless Bass\",\n        \"Slap Bass 1\",\n        \"Slap Bass 2\",\n        \"Synth Bass 1\",\n        \"Synth Bass 2\",\n        \"Violin\",\n        \"Viola\",\n        \"Cello\",\n        \"Contrabass\",\n        \"Tremolo Strings\",\n        \"Pizzicato Strings\",\n        \"Harp\",\n        \"Timpani\",\n        \"Strings\",\n        \"Slow Strings\",\n        \"Synth Strings 1\",\n        \"Synth Strings 2\",\n        \"Chor Aahs\",\n        \"Voice Oohs\",\n        \"Synth Vox\",\n        \"OrchestraHit\",\n        \"Trumpet\",\n        \"Trombone\",\n        \"Tuba\",\n        \"MutedTrumpet\",\n        \"French Horns\",\n        \"Brass 1\",\n        \"Synth Brass 1\",\n        \"Synth Brass 2\",\n        \"Soprano Sax\",\n        \"Alto Sax\",\n        \"Tenor Sax\",\n        \"Baritone Sax\",\n        \"Oboe\",\n        \"English Horn\",\n        \"Bassoon\",\n        \"Clarinet\",\n        \"Piccolo\",\n        \"Flute\",\n        \"Recorder\",\n        \"Pan Flute\",\n        \"Bottle Blow\",\n        \"Shakuhachi\",\n        \"Whistle\",\n        \"Ocarina\",\n        \"Square Wave\",\n        \"Saw Wave\",\n        \"Synth Calliope\",\n        \"Chiffer Lead\",\n        \"Charang\",\n        \"Solo Vox\",\n        \"5th Saw Wave\",\n        \"Bass & Lead\",\n        \"Fantasia\",\n        \"Warm Pad\",\n        \"Polysynth\",\n        \"Space Voice\",\n        \"Bowed Glass\",\n        \"Metal Pad\",\n        \"Halo Pad\",\n        \"Sweep Pad\",\n        \"Ice Rain\",\n        \"SoundTrack\",\n        \"Crystal\",\n        \"Atomosphere\",\n        \"Brightness\",\n        \"Goblin\",\n        \"Echo Drops\",\n        \"Star Theme\",\n        \"Sitar\",\n        \"Banjo\",\n        \"Shamisen\",\n        \"Koto\",\n        \"Kalimba\",\n        \"Bagpipe\",\n        \"Fiddle\",\n        \"Shenai\",\n        \"Tinkle Bell\",\n        \"Agogo\",\n        \"Steel Drums\",\n        \"Woodblock\",\n        \"Taiko\",\n        \"Melodic Tom\",\n        \"Synth Drum\",\n        \"Reverse Sym\",\n        \"Gt.FretNoise\",\n        \"Breath Noise\",\n        \"Seashore\",\n        \"Bird\",\n        \"Telephone\",\n        \"Helicopter\",\n        \"Applause\",\n        \"Gun Shot\",\n    ]\n}\n\n\nexport default Lib","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Lib from '../Lib'\n\nclass ChordPlayerCell extends Component {\n\n    // テストで音を鳴らす\n    doClick() {\n        const chord = this.props.chord\n        const noteEvents = Lib.chordNameToNoteEvents(chord)\n        \n        // 音を鳴らす\n        noteEvents.map(noteEvent=>{\n            this.props.dispatch({\n                type: 'NOTE_ON',\n                data: noteEvent\n            })\n        })\n\n        // コードをアノテーションする\n        this.props.dispatch({\n            type: 'ADD_CHORD',\n            data: {\n                mea: this.props.mea,\n                tick: this.props.nowTick,\n                chord: this.props.chord\n            }\n        })\n    }\n\n    constructor(props){\n        super(props)\n\n        // ステートの設定\n        this.state = {\n        }\n\n        this.doClick = this.doClick.bind(this)\n    }\n\n    render() {\n        // 調による色分け\n        let style\n\n        const diff = (this.props.nowKey - this.props.index + 24) % 12\n        if (diff == 1 || diff == 0 || diff == 11) {\n            style = {\n                background: 'pink',\n                cursor: 'pointer'\n            }\n        }\n        else if (diff == 2 || diff == 3 || diff == 4){\n            style = {\n                background: 'cyan',\n                cursor: 'pointer'\n            }\n        }\n        else if (diff == 5 || diff == 6 || diff == 7){\n            style = {\n                background: 'gray',\n                cursor: 'pointer'\n            }\n        }\n        else if (diff == 8 || diff == 9 || diff == 10){\n            style = {\n                background: 'yellow',\n                cursor: 'pointer'\n            }\n        }\n        else {\n            style = {\n                background: 'gray',\n                cursor: 'pointer'\n            }\n        }\n\n        return (\n        <td onClick={this.doClick} style={style}>           \n            {this.props.chord}\n        </td>\n        )\n    }\n}\n\nexport default connect(state=>state)(ChordPlayerCell)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport ChordPlayerCell from './ChordPlayerCell'\n\nclass ChordPlayer extends Component {\n\n    // 五度圏\n    circleOfFifthKey   = ['','','','','7b', '6b',  '5b',  '4b', '3b', 'bb', 'b',  '♮',   '#', '##', '3#',  '4#',  '5#', '6#',  '7#','','','','']\n    circleOfFifthMajor = ['G','D',  'A',   'E',   'B',  'F#',  'C#',  'G#', 'D#', 'A#', 'F',   'C',  'G',  'D',  'A',   'E',   'B', 'F#', 'C#', 'G#', 'D#', 'A#', 'F']\n    circleOfFifthMinor = ['Em','Bm', 'F#m', 'C#m','G#m','D#m', 'A#m', 'Fm', 'Cm', 'Gm', 'Dm', 'Am', 'Em', 'Bm', 'F#m', 'C#m', 'G#m','D#m', 'A#m','Fm', 'Cm', 'Gm', 'Dm']\n\n    // 調を変える\n    doClick(e) {\n        const key = e.target.getAttribute('data-key')\n        this.setState({nowKey: key})\n    }\n\n    constructor(props){\n        super(props)\n\n        // ステートの設定\n        this.state = {\n            nowKey: 11,\n        }\n\n        this.doClick = this.doClick.bind(this)\n        this.createStyle = this.createStyle.bind(this)\n    }\n\n    // スタイルによって色を変える\n    createStyle(key) {\n        let style = null\n        if(this.state.nowKey == key){\n            style = {\n                cursor: 'pointer',\n                background: 'pink'\n            }\n        }else {\n            style = {\n                cursor: 'pointer'\n            }\n        }\n        return style\n    }\n\n    render() {\n        // td作成\n        const item0 = this.circleOfFifthKey  .map((name, index)=><th key={index} style={this.createStyle(index)} onClick={this.doClick} data-key={index}>{name}</th>)\n        const item1 = this.circleOfFifthMajor.map((name, index)=><ChordPlayerCell key={index} index={index} nowKey={this.state.nowKey} chord={name + (this.state.isSeventh ? '7' : '')} />)\n        const item2 = this.circleOfFifthMinor.map((name, index)=><ChordPlayerCell key={index} index={index} nowKey={this.state.nowKey} chord={name + (this.state.isSeventh ? '7' : '')} />)\n\n        return (\n            <table className='table table-bordered'><tbody>\n                <tr>\n                    {item0}\n                </tr>\n                <tr>\n                    {item1}\n                </tr>\n                <tr>\n                    {item2}\n                </tr>\n            </tbody></table>\n        )\n    }\n}\n\nexport default connect(state=>state)(ChordPlayer)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport ChordPlayer from './ChordPlayer';\n\nclass Instrument extends Component {\n\n    // Inputを受け取ったときのイベント\n    inputEvent(e) {\n        let target = e.target;\n        let message = '';\n        let numArray = [];\n        // 2桁の16進数にして表示する\n        // リアルタイムメッセージ（f8 or feは無視、なんとかして消したい）\n        e.data.forEach(val=> {\n            // if (val == 0xf8 || val == 0xfe) return\n            // numArray.push(('00' + val.toString(16)).substr(-2)); // 謎\n            numArray.push(val.toString(16))\n        });\n        if (numArray[0] == 'f8' || numArray[0] == 'fe') return \n        message = numArray.join(' ');\n        \n        // 選択中のDeviceに結果を送信する\n        this.state.outPorts[0].device.send(e.data);\n\n        // 2桁の16進数を表示\n        console.log(message);\n    }\n\n    // アウトプットセレクトタグが変化した場合\n    doChange(e) {\n        this.setState({ selectedOutPortID : e.target.value })\n    }\n\n    // テストで音を鳴らす\n    doClick() {\n        // 出力先の MIDI ポートを取得\n        const output = this.outputs.get(this.state.selectedOutPortID);\n\n        // MIDI メッセージを送信\n        output.send([0x90, 60, 100]);                                       // ノートオン\n        output.send([0x80, 60, 100], window.performance.now() + 500);      // 1秒後にノートオフ\n        // MIDI メッセージを送信\n        output.send([0x90, 64, 100]);                                       // ノートオン\n        output.send([0x80, 64, 100], window.performance.now() + 500);      // 1秒後にノートオフ\n        // MIDI メッセージを送信\n        output.send([0x90, 67, 100]);                                       // ノートオン\n        output.send([0x80, 67, 100], window.performance.now() + 500);      // 1秒後にノートオフ\n\n        // outputを登録する\n        this.props.dispatch({type: 'REGISTER_OUTPUT', output: output})\n    }\n\n    constructor(props){\n        super(props)\n\n        // ステートの設定\n        this.state = {\n            message: 'please wait...',\n            inPorts: [],\n            outPorts: [],\n            selectedOutPortID: '',\n            selectedInPortID: '',\n        }\n        \n        navigator.requestMIDIAccess({sysex: true}).then(\n            // 通信成功時\n            (midiAccess) => {                \n                // InPortの取得、設定\n                let inputIterator = midiAccess.inputs.values();\n                let inPorts = []\n                for (let input = inputIterator.next(); !input.done; input = inputIterator.next()) {\n                    let value = input.value;\n                    inPorts.push({\n                        name: value.name,\n                        ID: value.id\n                    })\n                    // イベント登録\n                    value.addEventListener('midimessage', this.inputEvent, false);\n                }\n                if (inPorts.length) this.setState({ selectedInPortID: inPorts[0].ID })\n                this.setState({ inPorts: inPorts })\n\n                // OutPortの取得、設定\n                let outPorts = []\n                this.outputs = midiAccess.outputs\n                for (let output of this.outputs.values()) {\n                    outPorts.push({\n                        device: output,\n                        name: output.name,\n                        ID: output.id\n                    })\n                }\n                if (outPorts.length) {\n                    this.setState({ \n                        selectedOutPortID: outPorts[0].ID\n                    })\n\n                    // outputを登録する\n                    this.props.dispatch({type: 'REGISTER_OUTPUT', output: this.outputs.get(outPorts[0].ID)})\n                }\n                this.setState({ \n                    outPorts: outPorts\n                })\n                \n                console.log(\"MIDI READY!!!\");\n                this.setState({message: \"MIDI READY\"})\n\n                // チャンネルを初期化する（Programのセットを行う）\n                this.props.dispatch({\n                    type: 'PROGRAM_SET_ALL'\n                })\n            },\n            // 通信失敗時\n            (msg) => {\n                console.log(\"MIDI FAILED - \" + msg);\n            }\n        )\n\n        this.doClick = this.doClick.bind(this)\n        this.doChange = this.doChange.bind(this)\n        this.inputEvent = this.inputEvent.bind(this)\n    }\n\n    render() {\n        // セレクトタグの内容を作る\n        let n = 0\n        let in_items = this.state.inPorts.map(value =>\n            <option key={n++} value={value.ID}>{value.name} ({value.ID})</option> \n            )\n        let out_items = this.state.outPorts.map(value =>\n            <option key={n++} value={value.ID}>{value.name} ({value.ID})</option> \n            )\n\n        return (\n        <div className='row'>\n            <div className='col-md-3'>\n                <table><tbody>\n                    <tr><td>Input: </td><td><select>{ in_items }</select></td></tr>\n                    <tr><td>Output: </td><td><select onChange={this.doChange} defaultValue=\"-1\">{ out_items }</select></td></tr>\n                </tbody></table>\n            </div>\n            <div className='col-md-3'>\n                <ChordPlayer />\n            </div>\n        </div>\n        )\n    }\n}\n\nexport default connect(state=>state)(Instrument)\n","import React, { Component } from 'react'\nimport { addEvent } from '../Store'\nimport { connect } from 'react-redux'\n\nclass PianoRollCell extends Component {\n    // セルがマウスオーバーされた時\n    doMouseEnter(e) {\n        // シングルモードの時\n        if (this.props.isSingle) {\n            // マウス左クリックが押下状態にある時\n            if ((e.buttons & 0x0001) ? true : false) {\n                console.log('Entered')\n                this.doClick(e)\n            }\n        }\n    }\n\n    // セルがクリックされた時\n    doClick(e) {\n        let tick = e.target.getAttribute('data-col') * 1\n        let note = e.target.getAttribute('data-row') * 1\n        this.setState(state => ({selected: !state.selected}))\n\n        if (this.state.selected){\n            this.props.dispatch({\n                type: 'DEL_EVENT',\n                data: {\n                    channel: this.props.channel,\n                    mea: this.props.mea,\n                    tick: tick,\n                    note: note\n                }\n            })\n        }\n        else {\n            let action = addEvent({\n                channel: this.props.channel,\n                mea: this.props.mea,\n                tick: tick,\n                note: note,\n                gate: 120,\n                vel: 100\n            })\n            this.props.dispatch(action)\n\n            // 単音モードの場合は同じTickの音を消す（遅い実装っぽい、Storeに関数作る？、もしくはindexを取得）\n            if (this.props.isSingle) {\n                // 検索\n                const sameTickEvents = this.props.noteEvents.filter(noteEvent=>(\n                    noteEvent.channel == action.data.channel &&\n                    noteEvent.mea == action.data.mea &&\n                    noteEvent.tick == action.data.tick\n                ))\n\n                // 削除\n                if (sameTickEvents.length > 0) {\n                    sameTickEvents.map((noteEvent)=>{\n                        this.props.dispatch({\n                            type: 'DEL_EVENT',\n                            data: {\n                                channel: this.props.channel,    \n                                mea: this.props.mea,\n                                tick: tick,\n                                note: noteEvent.note\n                            }\n                        })\n                    })\n                }\n            }\n\n            if (this.props.isPreview) {\n                // プレビュー前にNoteOffする\n                this.props.dispatch({\n                    type: 'ALL_NOTE_OFF'\n                })\n                \n                // 音をプレビューする\n                this.props.dispatch({\n                    type: 'NOTE_ON',\n                    data: {\n                        channel: this.props.channel,\n                        note: note,\n                        gateMs: 200,\n                        vel: 100\n                    }\n                })\n            }\n        }\n    }\n\n    constructor(props){\n        super(props)\n\n        // ステートの設定\n        this.state = {\n            selected: false\n        }\n        \n        this.doClick = this.doClick.bind(this)\n        this.doMouseEnter = this.doMouseEnter.bind(this)\n    }\n    \n\n    render() {\n        let noteNum = this.props.row\n        let tick = this.props.col\n\n        // イベントを検索し、見つけたらtrueとする（なんか遅くなりそうな実装）\n        const findData = this.props.noteEvents.find(noteEvent=> (\n            noteEvent.channel == this.props.channel &&\n            noteEvent.mea == this.props.mea &&\n            noteEvent.note == noteNum &&\n            noteEvent.tick == tick\n        ))\n        if (findData === undefined) this.state.selected = false\n        else this.state.selected = true\n\n        // スタイルを追加\n        let td = { width: '50px' }\n        if(this.state.selected) {\n            const color = ['crimson','gray','orange','gray','yellow','lime','gray','green','gray','darkblue','gray','magenta']\n            td = {\n                ...td,\n                background: color[noteNum % 12]\n            }\n        }\n\n        // tick4つごとに区切り線を追加\n        if (tick % 4 == 0){\n            td = {\n                ...td,\n                borderLeft: '2px solid #e7e7e7'\n            }\n        }\n\n        return (\n            <td style={td}\n            onClick={this.doClick} onMouseEnter={this.doMouseEnter} data-row={noteNum} data-col={tick}>\n            </td>\n        )\n    }\n}\n\nexport default connect(state=>state)(PianoRollCell)\n","import React, { Component } from 'react'\nimport PianoRollCell from './PianoRollCell'\nimport { connect } from 'react-redux'\nimport Lib from '../Lib'\n\nclass PianoRoll extends Component {\n    // div全体（スクロールできる）\n    box = {\n        height: '500px',\n        overflow: 'auto',\n        cursor: 'pointer',\n        userSelect: 'none'\n    }\n    th = {\n        width: '100px'\n    }\n    \n    changeBaseKey(e) { this.setState({baseNote: e.target.value}) }\n    changeMea(e) { \n        this.props.dispatch({type: 'MOVE_MEA', mea: e.target.value}) \n    }\n    changeSingle(e) {this.setState({isSingle: e.target.checked})}\n    changePreview(e) {this.setState({isPreview: e.target.checked})}\n\n    constructor(props){\n        super(props)\n\n        // ステートの設定\n        this.state = {\n            width : 16,\n            height : 13,\n            baseNote: 72,\n            isSingle: true, // 単音モード\n            isPreview: true, // プレビューするかどうか\n        }\n        \n        this.changeBaseKey = this.changeBaseKey.bind(this)\n        this.changeMea = this.changeMea.bind(this)\n        this.changeSingle = this.changeSingle.bind(this)\n        this.changePreview = this.changePreview.bind(this)\n        this.rollStyle = this.rollStyle.bind(this)\n\n        this.ref = React.createRef()\n    }\n\n    // 読み込み時にピアノロールの中央までスクロールを行う\n    componentDidMount() {\n        this.ref.current.scrollIntoView({\n            block: 'center'\n        })\n    }\n\n    // スケールによってピアノロールの色を変える\n    rollStyle(note) {\n        // スケール（とりあえず、ダイアトニック）\n        const scale = [1,0,1,0,1,1,0,1,0,1,0,1]\n        // スケール外の音\n        const tr_outScale = { background: 'whitesmoke' }\n        // スケール内の音\n        const tr_onScale = { background: 'white' }\n        // 現在の調の音\n        const tr_baseKey = { background: 'mistyrose' }\n        // オフセット\n        const offset = (note - this.state.baseNote + 120) % 12\n\n        if (offset == 0) return tr_baseKey\n        if (scale[offset]) return tr_onScale\n        else return tr_outScale\n    }\n\n    render() {\n        // ダミーの数値（Reactのkeyのため必要？）\n        const notes = []\n        for (let i = 127; i >= 0; i--) {\n            notes.push(i)\n        }\n        const ticks = []\n        for (let i = 1; i <= 16; i++) {\n            ticks.push(i)\n        }\n\n        // ピアノロール生成\n        const roll = notes.map((fuga, indexRow) => {\n            const note = 127 - indexRow\n            return (\n                <tr key={fuga} style={this.rollStyle(note)}>\n                    {/* 音階 */}\n                    <th style={this.th} ref={note == this.state.baseNote ? this.ref : ''}>{Lib.noteNumberToNoteName(note)}</th>\n\n                    {/* 選択できる部分 */}\n                    {ticks.map((hoge, indexCol) => \n                        <PianoRollCell key={hoge} row={note} col={indexCol} isSingle={this.state.isSingle} isPreview={this.state.isPreview} />\n                    )}\n                </tr>\n            )\n        })\n\n        return (\n            <div>\n                {/* ピアノロール表示 */}\n                <div style={this.box}>\n                <table className=\"table table-bordered table-sm\"><tbody>\n                    {roll}\n                </tbody></table>\n                </div>\n\n                {/* 操作部 */}\n                <p>\n                    {/* 調性 */}\n                    <label>Key: </label>\n                    <input type=\"number\" value={this.state.baseNote} min=\"12\" max=\"127\" onChange={(this.changeBaseKey)} />\n                    ({Lib.noteNumberToNoteName(this.state.baseNote)})\n\n                    {/* 小節 */}\n                    <label>Mea: </label>\n                    <input type=\"number\" value={this.props.mea} min=\"1\" max=\"127\" onChange={this.changeMea} />\n\n                    {/* 単音モードボタン */}\n                    <label>Single: </label>\n                    <input type=\"checkbox\" id=\"single\" onChange={this.changeSingle} checked={this.state.isSingle} />\n\n                    {/* プレビューボタン */}\n                    <label>Preview: </label>\n                    <input type=\"checkbox\" id=\"single\" onChange={this.changePreview} checked={this.state.isPreview} />\n                </p>                \n            </div>\n        )\n    }\n}\n\nexport default connect(state=>state)(PianoRoll)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nclass ChordRollCell extends Component {\n    td = {\n        width: '50px'\n    }\n    ChangeChord(tick, chord) {\n        this.props.dispatch({\n            type: 'ADD_CHORD',\n            data: {\n                mea: this.props.mea,\n                tick: tick,\n                chord: chord\n            }\n        })\n    }\n\n    constructor(props){\n        super(props)\n\n        // ステートの設定\n        this.state = {\n        }\n        \n        this.ChangeChord = this.ChangeChord.bind(this)\n    }\n\n    render() {\n        // イベントを検索し、見つけたらtrueとする（なんか遅くなりそうな実装）\n        const findData = this.props.chordEvents.find(chordEvent=> (\n            chordEvent.mea == this.props.mea &&\n            chordEvent.tick == this.props.tick\n        ))\n\n        return (\n            <td style={this.td}>\n                {findData && findData.chord}\n            </td>\n        )\n    }\n}\n\nexport default connect(state=>state)(ChordRollCell)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport ChordRollCell from './ChordRollCell'\n\nclass ChordRoll extends Component {\n    th = {\n        width: '100px'\n    }\n    clicker = {\n        overflowY: 'scroll',\n        cursor: 'pointer'\n    }\n    maxTick = 16\n\n    constructor(props){\n        super(props)\n\n        // ステートの設定\n        this.state = {\n        }\n    }\n\n    render() {\n\n        const ticks = []\n        for (let i = 0; i < this.maxTick; i++) {\n            ticks.push(<ChordRollCell key={i} tick={i} />)\n        }\n\n        return (\n            <div style={this.clicker}>\n                <table className=\"table table-bordered table-sm\"><tbody><tr>\n                    <th style={this.th}>C</th>\n                    {ticks}\n                </tr></tbody></table>\n            </div>\n        )\n    }\n}\n\nexport default connect(state=>state)(ChordRoll)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Lib from '../Lib'\n\nclass NotePane extends Component {\n    box = {\n        height: '500px',\n        overflow: 'auto'\n    }\n\n    doClick(e) {\n    }\n\n    constructor(props){\n        super(props)\n\n        // ステートの設定\n        this.state = {\n        }\n        \n        this.doClick = this.doClick.bind(this)\n    }\n\n    render() {\n        // 現在のチャンネルのイベントのみを取り出す\n        const channelItem = this.props.noteEvents.filter(noteEvent=>{\n            return noteEvent.channel == this.props.channel\n        })\n\n        // ペインに表示されるテーブルを生成\n        const noteItem = channelItem.map((noteEvent, index)=>(\n            <tr key={index}>\n                <td>{noteEvent.mea}</td>\n                <td>{noteEvent.tick}</td>\n                <td>{Lib.noteNumberToNoteName(noteEvent.note)}</td>\n                <td>{noteEvent.gate}</td>\n                <td>{noteEvent.vel}</td>\n            </tr>\n        ))\n\n        return (\n            <div style={this.box}>\n                <table className=\"table table-sm\">\n                    <thead>\n                        <tr>\n                            <th>Mea</th>\n                            <th>Tick</th>\n                            <th>Event</th>\n                            <th>Gate</th>\n                            <th>Vel/Value</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {noteItem}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n}\n\nexport default connect(state=>state)(NotePane)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nclass Conductor extends Component {\n    th = {\n        width: '100px'\n    }\n    td = {\n        width: '50px'\n    }\n    tdNow = {\n        width: '50px',\n        background: 'yellow'\n    }\n    clicker = {\n        overflowY: 'scroll',\n    }\n    maxTick = 16\n\n    PlayToggle() {\n        if (this.state.isPlaying) {\n            this.setState({isPlaying: false})\n            clearTimeout(this.timer)\n        }\n        else {\n            this.setState({isPlaying: true})\n            this.Play()\n            this.timer = setTimeout(this.Proceed,  240 * 1000 / this.state.bpm / this.maxTick )\n        }\n    }\n\n    Play() {\n        // このタイミングで演奏する？ それともストアでやらせるか？\n        // noteを検索\n        const data = this.props.noteEvents.filter(noteEvent=>{\n            if (this.state.isSolo) {\n                return noteEvent.channel == this.props.channel && noteEvent.mea == this.props.mea && noteEvent.tick == this.state.nowTick\n            }\n            else return noteEvent.mea == this.props.mea && noteEvent.tick == this.state.nowTick\n        })\n\n        // 該当するデータがあれば\n        if (data.length > 0) {\n            // 音を鳴らす\n            data.map(d => {\n                this.props.dispatch({\n                    type: 'NOTE_ON',\n                    data: {\n                        channel: d.channel,\n                        note: d.note,\n                        gateMs: 240 * 1000 / this.state.bpm * (d.gate / (480 * 4)) - 1,\n                        vel: d.vel,\n                    }\n                })\n            })\n        }\n    }\n\n    // tickが進むごとに実行される関数\n    Proceed() {\n        // 小節の最後までTickが進んだらmeaを進める\n        let nextTick = this.state.nowTick + 1\n        if (nextTick == this.maxTick) {\n            nextTick %= this.maxTick\n            if (!this.state.isLoop) {\n                // なぜか遅れる（要対処！！！！）\n                // 最後の小節だったら最初に戻る\n                console.log(this.props.finalMea)\n                if (this.props.mea > this.props.finalMea)\n                    this.props.dispatch({ type:'MOVE_MEA', mea: 0 })\n                else\n                    this.props.dispatch({ type:'MOVE_MEA', mea: this.props.mea*1 +1 })       \n            }\n        }\n        this.setState({ nowTick: nextTick })\n        \n        this.Play()\n        \n        // 小節の終わりの一個前のtickに来たら、delayTimeを少し短くする（無理やりな実装）\n        let delayTime = 240 * 1000 / this.state.bpm / this.maxTick\n        if (nextTick == this.maxTick - 1 && !this.state.isLoop) delayTime -= 80\n        \n        this.timer = setTimeout(this.Proceed, delayTime )\n    }\n\n    ChangeBPM(e) {\n        this.setState({bpm: e.target.value})\n    }\n\n    ChangeLoop(e) {\n        this.setState({isLoop: e.target.checked})\n    }\n\n    ChangeSolo(e) {\n        this.setState({isSolo: e.target.checked})\n    }\n    ChangeTick(e) {\n        this.setState({nowTick: e.target.getAttribute('data-tick')*1})\n    }\n\n    constructor(props){\n        super(props)\n\n        // ステートの設定\n        this.state = {\n            bpm : 60,\n            nowTick: 0,\n            isPlaying: false, // 再生中かどうか\n            isLoop: true, // ループするかどうか\n            isSolo: false // ソロ演奏するかどうか\n        }\n        \n        this.PlayToggle = this.PlayToggle.bind(this)\n        this.Proceed = this.Proceed.bind(this)\n        this.ChangeBPM = this.ChangeBPM.bind(this)\n        this.ChangeLoop = this.ChangeLoop.bind(this)\n        this.ChangeSolo = this.ChangeSolo.bind(this)\n        this.ChangeTick = this.ChangeTick.bind(this)\n    }\n\n    render() {\n        let ticks = []\n        for (let i = 0; i < this.maxTick; i++) {\n            ticks.push(<td key={i} data-tick={i} onClick={this.ChangeTick} style={this.state.nowTick == i ? this.tdNow : this.td}></td>)\n        }\n\n        return (\n            <div>\n                <p>\n                    {/* tempo */}\n                    <input type=\"number\" value={this.state.bpm} min=\"10\" max=\"300\" onChange={this.ChangeBPM} />\n                    \n                    {/* 再生・停止ボタン（別コンポーネントのほうがいい？） */}\n                    <button className=\"btn btn-primary\" onClick={this.PlayToggle}>\n                        {this.state.isPlaying ? 'Playing' : 'Play'}\n                    </button>\n\n                    {/* ループボタン */}\n                    <label>Loop: </label>\n                    <input type=\"checkbox\" id=\"loop\" onChange={this.ChangeLoop} checked={this.state.isLoop}/>\n\n                    {/* ソロボタン */}\n                    <label>Solo: </label>\n                    <input type=\"checkbox\" id=\"solo\" onChange={this.ChangeSolo} checked={this.state.isSolo}/>\n                </p>\n\n                {/* シーケンスクリック（横に流れていくやつ）表示 */}\n                <div style={this.clicker}>\n                <table className=\"table table-bordered table-sm\"><tbody><tr>\n                    <th style={this.th}>4/4</th>\n                    {ticks}\n                </tr></tbody></table>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default connect(state=>state)(Conductor)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Lib from '../Lib'\n\nclass ChannelSelector extends Component {\n\n    // テストで音を鳴らす\n    ChangeSelector(e) {\n        this.props.dispatch({\n            type: 'MOVE_CHANNEL',\n            channel: e.target.value*1\n        })\n    }\n\n    // チャンネルを追加する\n    AddChannel() {\n        this.props.dispatch({\n            type: 'ADD_CHANNEL',\n        })\n    }\n\n    constructor(props){\n        super(props)\n\n        // ステートの設定\n        this.state = {\n        }\n\n        this.ChangeSelector = this.ChangeSelector.bind(this)\n        this.AddChannel = this.AddChannel.bind(this)\n    }\n\n    render() {\n        // セレクトタグの内容を作る\n        let n = 0\n        let items = this.props.channelData.map(channel =>\n            <option key={n} value={n}>Ch.{n++} {Lib.programName[channel.program]}</option> \n        )\n\n        return (\n            <>\n            <select onChange={this.ChangeSelector} value={this.props.channel}>{ items }</select>\n            <button className=\"btn btn-secondary btn-sm\" onClick={this.AddChannel}>+</button>\n            </>\n        )\n    }\n}\n\nexport default connect(state=>state)(ChannelSelector)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Lib from '../Lib'\n\nclass ProgramChanger extends Component {\n\n    // Program Change\n    ChangeSelector(e) {\n        this.props.dispatch({\n            type: 'PROGRAM_CHANGE',\n            programNumber: e.target.value*1\n        })\n    }\n\n    constructor(props){\n        super(props)\n\n        // ステートの設定\n        this.state = {\n        }\n\n        this.ChangeSelector = this.ChangeSelector.bind(this)\n    }\n\n    render() {\n        // セレクトタグの内容を作る\n        let n = 0\n        let items = Lib.programName.map(value =>\n            <option key={n} value={n}>{n++}. {value}</option> \n        )\n\n        return (\n            <select onChange={this.ChangeSelector} value={this.props.channelData[this.props.channel].program}>{ items }</select>\n        )\n    }\n}\n\nexport default connect(state=>state)(ProgramChanger)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Button, Modal, Table } from 'react-bootstrap';\n\nclass SongSelector extends Component {\n    closeModal() {\n        this.setState({isModalOpen: false})\n    }\n    openModal() {\n        this.setState({isModalOpen: true})\n    }\n    selectID(id) {\n        this.setState({selectedID: id})\n    }\n    openSong() {\n        this.props.dispatch({\n            type: 'OPEN_SONG',\n            id: this.state.selectedID\n        })\n        this.closeModal()\n    }\n    delSong() {\n        this.props.dispatch({\n            type: 'DEL_SONG',\n            id: this.state.selectedID\n        })\n    }\n\n    constructor(props) {\n        super(props)\n\n        // ステートの設定\n        this.state = {\n            isModalOpen: false,\n            selectedID: -1\n        }\n\n        this.closeModal = this.closeModal.bind(this)\n        this.openModal = this.openModal.bind(this)\n        this.selectID = this.selectID.bind(this)\n        this.openSong = this.openSong.bind(this)\n        this.delSong = this.delSong.bind(this)\n    }\n\n    render() {\n        let items= this.props.songs.map(song=>(\n            <tr key={song.id} onClick={()=>this.selectID(song.id)}\n                className={this.state.selectedID === song.id ? \"table-active\" : ''}>\n                <td>{song.name}</td>\n                <td>{song.updated}</td>\n                <td>{song.author}</td>\n            </tr>\n        ))\n\n        return <>\n        <Button variant=\"primary\" onClick={this.openModal}>\n            Open\n        </Button>\n\n        <Modal show={this.state.isModalOpen} onHide={this.closeModal}>\n            <Modal.Header closeButton>\n                <Modal.Title>Song List</Modal.Title>\n            </Modal.Header>\n            \n            <Modal.Body>\n                <table className=\"table table-hover table-sm\">\n                <thead className=\"thead-light\">\n                    <tr>\n                        <th>Title</th>\n                        <th>Updated</th>\n                        <th>Author</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {items}\n                </tbody>\n                </table>\n            </Modal.Body>\n            \n            <Modal.Footer>\n                { this.state.selectedID !== -1 && <>\n                    <Button variant=\"danger\" onClick={this.delSong}>\n                        Del\n                    </Button>\n                    <Button variant=\"primary\" onClick={this.openSong}>\n                        Open\n                    </Button>\n                </>}\n            </Modal.Footer>\n            </Modal>\n        </>\n    }\n}\n\nexport default connect(state => state)(SongSelector)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Button, Modal } from 'react-bootstrap';\n\nclass SaveDialog extends Component {\n    closeModal() {\n        this.setState({isModalOpen: false})\n    }\n    openModal() {\n        this.setState({isModalOpen: true})\n    }\n    onChange(e) {\n        this.setState({name: e.target.value})\n    }\n    save(e) {\n        e.preventDefault()\n        this.props.dispatch({\n            type: 'SAVE_SONG',\n            name: this.state.name\n        })\n        this.closeModal()\n    }\n\n\n    constructor(props) {\n        super(props)\n\n        // ステートの設定\n        this.state = {\n            isModalOpen: false,\n            name: ''\n        }\n\n        this.closeModal = this.closeModal.bind(this)\n        this.openModal = this.openModal.bind(this)\n        this.onChange = this.onChange.bind(this)\n        this.save = this.save.bind(this)\n    }\n\n    render() {\n        return <>\n        <Button variant=\"primary\" onClick={this.openModal}>\n            Save\n        </Button>\n\n        <Modal show={this.state.isModalOpen} onHide={this.closeModal}>\n            <Modal.Header closeButton>\n                <Modal.Title>Save As...</Modal.Title>\n            </Modal.Header>\n            \n            <Modal.Body>\n                <form onSubmit={this.save}>\n                    <input\n                        className='form-control'\n                        type=\"text\" \n                        value={this.state.name} \n                        onChange={this.onChange}\n                        placeholder='Title'\n                        />\n                    <input type=\"submit\" value='Save' />\n                </form>\n            </Modal.Body>\n            </Modal>\n        </>\n    }\n}\n\nexport default connect(state => state)(SaveDialog)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Lib from '../Lib'\n\nclass SMFWriter extends Component {\n\n    // SMFに書き出す\n    SMFWrite() {\n        const MidiWriter = require('midi-writer-js')\n        const tracks = []\n        \n        // チャンネル数分繰り返す\n        this.props.channelData.map((ch, index) => {\n            const newTrack = new MidiWriter.Track()\n            \n            alert('ch: ' + index + 'Program: ' + ch.program)\n\n            // Program Change\n            newTrack.addEvent(new MidiWriter.ProgramChangeEvent({instrument: ch.program, channel: index}))\n            \n            // 現在のチャンネルのnoteEventを取り出す\n            const ne = this.props.noteEvents.filter(noteEvent=> noteEvent.channel === index)\n\n            // noteEvents\n            ne.map(noteEvent => {\n                let note = new MidiWriter.NoteEvent({\n                    pitch: Lib.noteNumberToNoteName(noteEvent.note),\n                    duration: '8',\n                    channel: index + 1,\n                    velocity: noteEvent.vel\n                })\n                console.log(note)\n                newTrack.addEvent(note)\n            })\n            tracks.push(newTrack)\n        })\n\n        //newTrack.addEvent(notes, (event, index) => {sequential: true})\n\n        const writer = new MidiWriter.Writer(tracks)\n        //let writer = new MidiWriter.Writer(newTrack)\n\n        // URL遷移（ダウンロード）\n        window.location.href = writer.dataUri()\n        //writer.saveMIDI('name')\n    }\n\n    constructor(props){\n        super(props)\n\n        // ステートの設定\n        this.state = {\n        }\n        \n        this.SMFWrite = this.SMFWrite.bind(this)\n    }\n\n    render() {\n\n        return (\n            <button className=\"btn btn-primary\" onClick={this.SMFWrite}>SMF</button>\n        )\n    }\n}\n\nexport default connect(state=>state)(SMFWriter)\n","import React, { Component } from 'react'\nimport PianoRoll from './PianoRoll'\nimport ChordRoll from './ChordRoll'\nimport NotePane from './NotePane'\nimport { connect } from 'react-redux'\nimport Conductor from './Conductor'\nimport ChannelSelector from './ChannelSelector'\nimport ProgramChanger from './ProgramChanger'\nimport SongSelector from './SongSelector'\nimport SaveDialog from './SaveDialog'\nimport SMFWriter from './SMFWriter'\n\n\nclass Sequencer extends Component {\n    doClick(e) {\n        this.props.dispatch({\n            type: 'DEL_ALL'\n        })\n    }\n\n    constructor(props){\n        super(props)\n\n        // ステートの設定\n        this.state = {\n        }\n        \n        this.doClick = this.doClick.bind(this)\n    }\n\n    render() {\n        return <div>\n            <div className='row mt-4'>\n                \n                <div className='col-md-3'>\n                    <div>\n                        <div>\n                            <SongSelector />\n                            <SaveDialog />\n                            {/* <SMFWriter /> */}\n                        </div>\n                        <ChannelSelector />\n                        <ProgramChanger />\n                    </div>\n                    <NotePane />\n                    <button className='btn btn-danger' onClick={this.doClick}>Del All Event</button>\n                </div>\n\n                <div className='col-md-9'>\n                    <Conductor />\n                    <PianoRoll />\n                    {/* <ChordRoll /> */}\n                </div>\n            </div>\n        </div>\n    }\n}\n\nexport default connect(state=>state)(Sequencer)\n","import './App.css'\nimport React, { Component } from 'react'\n\nimport { Provider } from 'react-redux'\nimport MidipStore, { midipReducer } from './midip/Store'\nimport { createStore } from 'redux'\n\nimport { persistStore, persistReducer } from 'redux-persist'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport storage from 'redux-persist/lib/storage'\n\nimport Instrument from './midip/components/Instrument'\nimport Sequencer from './midip/components/Sequencer'\n\n// Redux Persistの設定\nconst persistConfig = {\n    key: 'midip',\n    storage: storage,\n    blacklist: ['output'],\n    whitelist: ['songs', 'noteEvents','channelData']\n}\n\n// パーシストレデューサの設定\nconst persistedReducer = persistReducer(persistConfig, midipReducer)\n\n// ストア、パーシスタの作成\nlet store = createStore(persistedReducer)\nlet pstore = persistStore(store)\n\nclass App extends Component {\n    constructor(props){\n        super(props)\n    }\n\n    style = {\n        background: \"#FDFDFD\",\n    }\n\n\n    render() {\n    return (\n        <div className=\"container-fluid\" style={this.style}>\n            <Provider store={store}>\n                <PersistGate loading={<p>loading...</p>} persistor={pstore}>\n                    <Sequencer />\n                    <hr />\n                    <Instrument />\n\n                </PersistGate>\n            </Provider>\n\n            <footer className=\"text-center text-black-50\">©syun560/2021</footer>\n        </div>\n    )\n    }\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}