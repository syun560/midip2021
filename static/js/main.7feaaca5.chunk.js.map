{"version":3,"sources":["midip/Store.js","midip/Lib.js","midip/ChordPlayerCell.js","midip/ChordPlayer.js","midip/Instrument.js","midip/PianoRollCell.js","midip/PianoRoll.js","midip/NotePane.js","midip/Conductor.js","midip/Player.js","midip/ChannelSelector.js","midip/ProgramChanger.js","midip/SongSelector.js","midip/SaveDialog.js","midip/Sequencer.js","App.js","reportWebVitals.js","index.js"],"names":["initData","songs","id","name","updated","author","channelData","program","noteEvents","tempo","output","mea","channel","sortNotes","arr","sort","a","b","tick","note","midipReducer","state","action","type","new_data","slice","push","data","del_data","filter","noteEvent","ch","undefined","send","vel","window","performance","now","gateMs","map","index","num","programNumber","newChannelData","newChannel","length","console","log","d","Date","date","getFullYear","getMonth","getDay","getHours","getMinutes","newSongs","newSong","foundSong","find","song","createStore","Lib","base","Math","floor","toString","chordPattern","baseName","chordName","substr","baseNote","indexOf","chord","offset","programName","ChordPlayerCell","props","doClick","bind","this","chordNameToNoteEvents","dispatch","style","diff","nowKey","background","cursor","onClick","Component","connect","ChordPlayer","circleOfFifthKey","circleOfFifthMajor","circleOfFifthMinor","createStyle","e","key","target","getAttribute","setState","item0","data-key","item1","isSeventh","item2","className","Instrument","message","inPorts","outPorts","selectedOutPortID","selectedInPortID","navigator","requestMIDIAccess","sysex","then","midiAccess","inputIterator","inputs","values","input","next","done","value","ID","addEventListener","inputEvent","outputs","device","get","msg","doChange","numArray","forEach","val","join","n","in_items","out_items","onChange","defaultValue","PianoRollCell","tdUnselected","width","tdSelected","border","borderLeft","selected","doMouseEnter","isSingle","buttons","gate","sameTickEvents","isPreview","noteNum","row","col","findData","onMouseEnter","data-row","data-col","PianoRoll","box","height","overflow","userSelect","th","changeBaseKey","changeMea","changeSingle","changePreview","rollStyle","ref","React","createRef","checked","current","scrollIntoView","block","notes","i","ticks","rows","fuga","indexRow","noteNumberToNoteName","hoge","indexCol","min","max","NotePane","noteItem","Conductor","td","tdNow","clicker","overflowY","maxTick","bpm","nowTick","isPlaying","isLoop","isSolo","PlayToggle","Proceed","ChangeBPM","ChangeLoop","ChangeSolo","ChangeTick","clearTimeout","timer","Play","setTimeout","nextTick","delayTime","data-tick","Player","ChannelSelector","ChangeSelector","AddChannel","items","ProgramChanger","SongSelector","isModalOpen","selectedID","closeModal","openModal","selectID","openSong","Button","variant","Modal","show","onHide","Header","closeButton","Title","Body","Table","Footer","SaveDialog","save","preventDefault","onSubmit","Sequencer","persistConfig","storage","blacklist","whitelist","persistedReducer","persistReducer","store","pstore","persistStore","App","loading","persistor","href","class","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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CA,eACA,YACA,aACA,UACA,YACA,gBACA,YACA,UACA,UACA,UACA,aACA,aACA,YACA,YACA,WACA,mBACA,eACA,cACA,eACA,eACA,mBACA,oBACA,eACA,gBACA,gBACA,cACA,gBACA,cACA,cACA,eACA,eACA,SACA,QACA,QACA,aACA,kBACA,oBACA,OACA,UACA,UACA,eACA,kBACA,kBACA,YACA,aACA,YACA,eACA,UACA,WACA,OACA,eACA,eACA,UACA,gBACA,gBACA,cACA,WACA,YACA,eACA,OACA,eACA,UACA,WACA,UACA,QACA,WACA,YACA,cACA,aACA,UACA,UACA,cACA,WACA,iBACA,eACA,UACA,WACA,eACA,cACA,WACA,WACA,YACA,cACA,cACA,YACA,WACA,YACA,WACA,aACA,UACA,cACA,aACA,SACA,aACA,aACA,QACA,QACA,WACA,OACA,UACA,UACA,SACA,SACA,cACA,QACA,cACA,YACA,QACA,cACA,aACA,cACA,eACA,eACA,WACA,OACA,YACA,aACA,WACA,YAKOb,Q,OC5LTc,E,kDAeF,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAGDxD,MAAQ,GAGb,EAAKyD,QAAU,EAAKA,QAAQC,KAAb,gBAPD,E,2CAZlB,WAAW,IAAD,OACAN,EAAQO,KAAKH,MAAMJ,MACNX,EAAImB,sBAAsBR,GAElClC,KAAI,SAAAT,GACX,EAAK+C,MAAMK,SAAS,CAChB3D,KAAM,UACNI,KAAMG,S,oBAelB,WAEI,IAAIqD,EAEEC,GAAQJ,KAAKH,MAAMQ,OAASL,KAAKH,MAAMrC,MAAQ,IAAM,GAgC3D,OA9BI2C,EADQ,GAARC,GAAqB,GAARA,GAAqB,IAARA,EAClB,CACJE,WAAY,OACZC,OAAQ,WAGC,GAARH,GAAqB,GAARA,GAAqB,GAARA,EACvB,CACJE,WAAY,OACZC,OAAQ,WAGC,GAARH,GAAqB,GAARA,GAAqB,GAARA,EACvB,CACJE,WAAY,OACZC,OAAQ,WAGC,GAARH,GAAqB,GAARA,GAAqB,IAARA,EACvB,CACJE,WAAY,SACZC,OAAQ,WAIJ,CACJD,WAAY,OA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","file":"static/js/main.7feaaca5.chunk.js","sourcesContent":["import  { createStore } from 'redux'\n\n// 初期値\nconst initData = {\n    songs: [\n        {\n            id: 1,\n            name: 'Sample Song',\n            updated: '2021-01-01',\n            author: 'syun560',\n            channelData: [{\n                program: 0,\n                name: 'Piano'\n            }],\n            noteEvents:[],\n            tempo: 12\n        }\n    ],\n    noteEvents: [],\n    output: null,\n    mea: 1,\n    channel: 0,\n    channelData: [\n        {\n            program: 0,\n            name: 'Piano'\n        },\n        {\n            program: 0,\n            name: 'Bass'\n        },\n        {\n            program: 0,\n            name: 'Drums'\n        },\n    ]\n}\n\n// 配列のソート\nfunction sortNotes(arr) {\n    arr.sort((a, b) => {\n        if (a.mea < b.mea) return -1\n        if (a.mea > b.mea) return 1\n        if (a.tick < b.tick) return -1\n        if (a.tick > b.tick) return 1\n        if (a.note < b.note) return -1\n        if (a.note > b.note) return 1\n        return 0\n    })\n}\n\n// レデューサ\nexport function midipReducer(state=initData, action) {\n    switch(action.type) {\n    // MIDIイベント管理----------------------------------\n    case 'ADD_EVENT':\n        let new_data = state.noteEvents.slice()\n        new_data.push(action.data)\n        sortNotes(new_data)\n        return {\n            ...state,\n            noteEvents: new_data\n        }\n    case 'DEL_EVENT':\n        let del_data = state.noteEvents.filter(\n            noteEvent=>(\n                noteEvent.channel != action.data.channel ||\n                noteEvent.mea != action.data.mea ||\n                noteEvent.tick != action.data.tick ||\n                noteEvent.note != action.data.note\n            )\n        )\n        return {\n            ...state,\n            noteEvents: del_data,\n        }\n    case 'DEL_ALL':\n        return {\n            ...state,\n            noteEvents: initData.noteEvents,\n        }\n\n    // MIDIデバイス操作-------------------------------------\n    case 'REGISTER_OUTPUT':\n        return {\n            ...state,\n            output: action.output,\n        }\n    case 'NOTE_ON':\n        {\n            let ch = 0\n            if (action.data.channel === undefined) ch = 0\n            else ch = action.data.channel\n            state.output.send([0x90 + ch, action.data.note, action.data.vel])\n            state.output.send([0x80 + ch, action.data.note, action.data.vel], window.performance.now() + action.data.gateMs);      // 1秒後にノートオフ\n            break\n        }\n    case 'ALL_NOTE_OFF':\n        state.output.send([0xB0, 0x7B, 0])\n        break\n    case 'PROGRAM_SET_ALL':\n        state.channelData.map((ch, index) => state.output.send([0xC0 + index, ch.program]))\n        break\n    case 'PROGRAM_CHANGE':\n        {\n            const ch = state.channel\n            const num = action.programNumber\n            state.output.send([0xC0 + ch, num])\n            let newChannelData = state.channelData.slice()\n            newChannelData[ch].program = num\n            return {\n                ...state,\n                channelData: newChannelData\n            }\n        }\n        \n            \n    // シーケンス操作--------------------------------------\n    case 'MOVE_MEA':\n        let mea = action.mea\n        if (mea > 128) mea = 128\n        if (mea < 1) mea = 1\n        \n        return {\n            ...state,\n            mea: mea,\n        }\n\n    // チャンネル操作-------------------------------------\n    case 'MOVE_CHANNEL':\n        let channel = action.channel\n        if (channel > 15) channel = 15\n        if (channel < 0) channel = 0\n        return {\n            ...state,\n            channel: channel,\n        }\n    case 'ADD_CHANNEL':\n        let newChannel = state.channelData.length\n        if (newChannel > 15) break\n        console.log(newChannel)\n        let newChannelData = state.channelData.slice()\n        newChannelData.push({\n            program: 0,\n            name: 'Piano'\n        })\n        return {\n            ...state,\n            channelData: newChannelData,\n            channel: newChannel\n        }\n\n    // Song操作-------------------------------------\n    case 'SAVE_SONG':\n        // 日付オブジェクトを文字列にして更新する\n        let d = new Date()\n        let date = d.getFullYear() + '/' + (d.getMonth()+1) + '/' + d.getDay() + ' ' +  d.getHours() + ':' + d.getMinutes()\n\n        // 配列の内容をコピーする\n        let newSongs = state.songs.slice()\n        let newSong = {\n            id: state.songs[state.songs.length - 1].id + 1,\n            name: action.name,\n            updated: date,\n            author: 'syun560',\n            channelData: state.channelData,\n            noteEvents: state.noteEvents\n        }\n        newSongs.push(newSong)\n\n        return {\n            ...state,\n            songs: newSongs\n        }\n    case 'OPEN_SONG':\n        // 指定されたidの曲を検索\n        let foundSong = state.songs.find(song => song.id === action.id)\n        if (foundSong===undefined) {\n            console.log(\"can't find song of selected ID: \" + action.id)\n            break\n        }\n        // プログラムリセット\n        foundSong.channelData.map((ch, index) => state.output.send([0xC0 + index, ch.program]))\n\n        return {\n            ...state,\n            channelData: [...foundSong.channelData],\n            noteEvents: [...foundSong.noteEvents],\n            mea: initData.mea,\n            channel: initData.channel\n        }\n        \n    default: \n        break\n    }\n    return state\n}\n\n\n// 追加のアクション\nexport function addEvent(data) {\n    return {\n        type: 'ADD_EVENT',\n        data: data\n    }\n}\n\n// ストアを作成\nexport default createStore(midipReducer)","class Lib {\n    // ノートナンバー（64）をノート（C5）に変換する\n    static noteNumberToNoteName(num) {\n        const notes_name = ['C','C#','D','D#','E','F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n        const base = Math.floor(num / 12) - 1\n        const offset = num % 12\n        return notes_name[offset] + base.toString()\n    }\n\n    static chordNameToNoteEvents(name) {\n        const chordPattern = {\n            major: [0, 4, 7],\n            minor: [0, 3, 7],\n            major7: [0, 4, 7, 11]\n        }\n\n        // 解析する（splitなどを利用する）\n        let baseName = ''\n        let chordName = ''\n\n        if (name[1] == '#') {\n            baseName = name.substr(0, 2)\n            chordName = name.substr(2)\n        }\n        else {\n            baseName = name.substr(0, 1)\n            chordName = name.substr(1)\n        }\n\n        // ノート取得\n        const notes_name = ['C','C#','D','D#','E','F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n        let baseNote = 60\n        baseNote += notes_name.indexOf(baseName)\n\n        // コード取得\n        let chord = []\n        switch(chordName) {\n            case '':\n                chord = chordPattern.major\n                break\n            case 'm':\n                chord = chordPattern.minor\n                break\n            default:\n                break\n        }\n\n        let noteEvents = []\n        chord.map((offset)=>{\n            noteEvents.push({\n                note: baseNote + offset,\n                vel: 100,\n                gateMs: 500\n            })\n        })\n\n        return noteEvents\n    }\n\n    static programName = [\n        \"Piano 1\",\n        \"Piano 2\",\n        \"Piano 3\",\n        \"Honkey-tonk\",\n        \"E.Piano 1\",\n        \"E.Piano 2\",\n        \"Harpsichord\",\n        \"Clav.\",\n        \"Celesta\",\n        \"Glockenspiel\",\n        \"Music Box\",\n        \"Vibraphone\",\n        \"Marimba\",\n        \"Xylophone\",\n        \"Tubular Bells\",\n        \"Dulcrimer\",\n        \"Organ 1\",\n        \"Organ 2\",\n        \"Organ 3\",\n        \"Pipe Organ\",\n        \"Reed Organ\",\n        \"Accordion\",\n        \"Harmonica\",\n        \"Bandneon\",\n        \"Nylon-str.Guitar\",\n        \"Steel-str.Gt\",\n        \"Jazz Guitar\",\n        \"Clean Guitar\",\n        \"Muted Guitar\",\n        \"Overdrive Guitar\",\n        \"Distortion Guitar\",\n        \"Gt.Harmonics\",\n        \"Acoustic Bass\",\n        \"Fingered Bass\",\n        \"Picked Bass\",\n        \"Fretless Bass\",\n        \"Slap Bass 1\",\n        \"Slap Bass 2\",\n        \"Synth Bass 1\",\n        \"Synth Bass 2\",\n        \"Violin\",\n        \"Viola\",\n        \"Cello\",\n        \"Contrabass\",\n        \"Tremolo Strings\",\n        \"Pizzicato Strings\",\n        \"Harp\",\n        \"Timpani\",\n        \"Strings\",\n        \"Slow Strings\",\n        \"Synth Strings 1\",\n        \"Synth Strings 2\",\n        \"Chor Aahs\",\n        \"Voice Oohs\",\n        \"Synth Vox\",\n        \"OrchestraHit\",\n        \"Trumpet\",\n        \"Trombone\",\n        \"Tuba\",\n        \"MutedTrumpet\",\n        \"French Horns\",\n        \"Brass 1\",\n        \"Synth Brass 1\",\n        \"Synth Brass 2\",\n        \"Soprano Sax\",\n        \"Alto Sax\",\n        \"Tenor Sax\",\n        \"Baritone Sax\",\n        \"Oboe\",\n        \"English Horn\",\n        \"Bassoon\",\n        \"Clarinet\",\n        \"Piccolo\",\n        \"Flute\",\n        \"Recorder\",\n        \"Pan Flute\",\n        \"Bottle Blow\",\n        \"Shakuhachi\",\n        \"Whistle\",\n        \"Ocarina\",\n        \"Square Wave\",\n        \"Saw Wave\",\n        \"Synth Calliope\",\n        \"Chiffer Lead\",\n        \"Charang\",\n        \"Solo Vox\",\n        \"5th Saw Wave\",\n        \"Bass & Lead\",\n        \"Fantasia\",\n        \"Warm Pad\",\n        \"Polysynth\",\n        \"Space Voice\",\n        \"Bowed Glass\",\n        \"Metal Pad\",\n        \"Halo Pad\",\n        \"Sweep Pad\",\n        \"Ice Rain\",\n        \"SoundTrack\",\n        \"Crystal\",\n        \"Atomosphere\",\n        \"Brightness\",\n        \"Goblin\",\n        \"Echo Drops\",\n        \"Star Theme\",\n        \"Sitar\",\n        \"Banjo\",\n        \"Shamisen\",\n        \"Koto\",\n        \"Kalimba\",\n        \"Bagpipe\",\n        \"Fiddle\",\n        \"Shenai\",\n        \"Tinkle Bell\",\n        \"Agogo\",\n        \"Steel Drums\",\n        \"Woodblock\",\n        \"Taiko\",\n        \"Melodic Tom\",\n        \"Synth Drum\",\n        \"Reverse Sym\",\n        \"Gt.FretNoise\",\n        \"Breath Noise\",\n        \"Seashore\",\n        \"Bird\",\n        \"Telephone\",\n        \"Helicopter\",\n        \"Applause\",\n        \"Gun Shot\",\n    ]\n}\n\n\nexport default Lib","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Lib from './Lib'\n\nclass ChordPlayerCell extends Component {\n\n    // テストで音を鳴らす\n    doClick() {\n        const chord = this.props.chord\n        const noteEvents = Lib.chordNameToNoteEvents(chord)\n        \n        noteEvents.map(noteEvent=>{\n            this.props.dispatch({\n                type: 'NOTE_ON',\n                data: noteEvent\n            })\n        })\n    }\n\n    constructor(props){\n        super(props)\n\n        // ステートの設定\n        this.state = {\n        }\n\n        this.doClick = this.doClick.bind(this)\n    }\n\n    render() {\n        // 調による色分け\n        let style\n\n        const diff = (this.props.nowKey - this.props.index + 24) % 12\n        if (diff == 1 || diff == 0 || diff == 11) {\n            style = {\n                background: 'pink',\n                cursor: 'pointer'\n            }\n        }\n        else if (diff == 2 || diff == 3 || diff == 4){\n            style = {\n                background: 'cyan',\n                cursor: 'pointer'\n            }\n        }\n        else if (diff == 5 || diff == 6 || diff == 7){\n            style = {\n                background: 'gray',\n                cursor: 'pointer'\n            }\n        }\n        else if (diff == 8 || diff == 9 || diff == 10){\n            style = {\n                background: 'yellow',\n                cursor: 'pointer'\n            }\n        }\n        else {\n            style = {\n                background: 'gray',\n                cursor: 'pointer'\n            }\n        }\n\n        return (\n        <td onClick={this.doClick} style={style}>           \n            {this.props.chord}\n        </td>\n        )\n    }\n}\n\nexport default connect(state=>state)(ChordPlayerCell)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport ChordPlayerCell from './ChordPlayerCell'\n\nclass ChordPlayer extends Component {\n\n    // 五度圏\n    circleOfFifthKey   = ['','','','','7b', '6b',  '5b',  '4b', '3b', 'bb', 'b',  '♮',   '#', '##', '3#',  '4#',  '5#', '6#',  '7#','','','','']\n    circleOfFifthMajor = ['G','D',  'A',   'E',   'B',  'F#',  'C#',  'G#', 'D#', 'A#', 'F',   'C',  'G',  'D',  'A',   'E',   'B', 'F#', 'C#', 'G#', 'D#', 'A#', 'F']\n    circleOfFifthMinor = ['Em','Bm', 'F#m', 'C#m','G#m','D#m', 'A#m', 'Fm', 'Cm', 'Gm', 'Dm', 'Am', 'Em', 'Bm', 'F#m', 'C#m', 'G#m','D#m', 'A#m','Fm', 'Cm', 'Gm', 'Dm']\n\n    // 調を変える\n    doClick(e) {\n        const key = e.target.getAttribute('data-key')\n        this.setState({nowKey: key})\n    }\n\n    constructor(props){\n        super(props)\n\n        // ステートの設定\n        this.state = {\n            nowKey: 11,\n        }\n\n        this.doClick = this.doClick.bind(this)\n        this.createStyle = this.createStyle.bind(this)\n    }\n\n    // スタイルによって色を変える\n    createStyle(key) {\n        let style = null\n        if(this.state.nowKey == key){\n            style = {\n                cursor: 'pointer',\n                background: 'pink'\n            }\n        }else {\n            style = {\n                cursor: 'pointer'\n            }\n        }\n        return style\n    }\n\n    render() {\n        // td作成\n        const item0 = this.circleOfFifthKey  .map((name, index)=><th key={index} style={this.createStyle(index)} onClick={this.doClick} data-key={index}>{name}</th>)\n        const item1 = this.circleOfFifthMajor.map((name, index)=><ChordPlayerCell key={index} index={index} nowKey={this.state.nowKey} chord={name + (this.state.isSeventh ? '7' : '')} />)\n        const item2 = this.circleOfFifthMinor.map((name, index)=><ChordPlayerCell key={index} index={index} nowKey={this.state.nowKey} chord={name + (this.state.isSeventh ? '7' : '')} />)\n\n        return (\n            <table className='table table-bordered'><tbody>\n                <tr>\n                    {item0}\n                </tr>\n                <tr>\n                    {item1}\n                </tr>\n                <tr>\n                    {item2}\n                </tr>\n            </tbody></table>\n        )\n    }\n}\n\nexport default connect(state=>state)(ChordPlayer)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport ChordPlayer from './ChordPlayer';\n\nclass Instrument extends Component {\n\n    // Inputを受け取ったときのイベント\n    inputEvent(e) {\n        let target = e.target;\n        let message = '';\n        let numArray = [];\n        // 2桁の16進数にして表示する\n        // リアルタイムメッセージ（f8 or feは無視、なんとかして消したい）\n        e.data.forEach(val=> {\n            // if (val == 0xf8 || val == 0xfe) return\n            // numArray.push(('00' + val.toString(16)).substr(-2)); // 謎\n            numArray.push(val.toString(16))\n        });\n        if (numArray[0] == 'f8' || numArray[0] == 'fe') return \n        message = numArray.join(' ');\n        \n        // 選択中のDeviceに結果を送信する\n        this.state.outPorts[0].device.send(e.data);\n\n        // 2桁の16進数を表示\n        console.log(message);\n    }\n\n    // アウトプットセレクトタグが変化した場合\n    doChange(e) {\n        this.setState({ selectedOutPortID : e.target.value })\n    }\n\n    // テストで音を鳴らす\n    doClick() {\n        // 出力先の MIDI ポートを取得\n        const output = this.outputs.get(this.state.selectedOutPortID);\n\n        // MIDI メッセージを送信\n        output.send([0x90, 60, 100]);                                       // ノートオン\n        output.send([0x80, 60, 100], window.performance.now() + 500);      // 1秒後にノートオフ\n        // MIDI メッセージを送信\n        output.send([0x90, 64, 100]);                                       // ノートオン\n        output.send([0x80, 64, 100], window.performance.now() + 500);      // 1秒後にノートオフ\n        // MIDI メッセージを送信\n        output.send([0x90, 67, 100]);                                       // ノートオン\n        output.send([0x80, 67, 100], window.performance.now() + 500);      // 1秒後にノートオフ\n\n        // outputを登録する\n        this.props.dispatch({type: 'REGISTER_OUTPUT', output: output})\n    }\n\n    constructor(props){\n        super(props)\n\n        // ステートの設定\n        this.state = {\n            message: 'please wait...',\n            inPorts: [],\n            outPorts: [],\n            selectedOutPortID: '',\n            selectedInPortID: '',\n        }\n        \n        navigator.requestMIDIAccess({sysex: true}).then(\n            // 通信成功時\n            (midiAccess) => {                \n                // InPortの取得、設定\n                let inputIterator = midiAccess.inputs.values();\n                let inPorts = []\n                for (let input = inputIterator.next(); !input.done; input = inputIterator.next()) {\n                    let value = input.value;\n                    inPorts.push({\n                        name: value.name,\n                        ID: value.id\n                    })\n                    // イベント登録\n                    value.addEventListener('midimessage', this.inputEvent, false);\n                }\n                if (inPorts.length) this.setState({ selectedInPortID: inPorts[0].ID })\n                this.setState({ inPorts: inPorts })\n\n                // OutPortの取得、設定\n                let outPorts = []\n                this.outputs = midiAccess.outputs\n                for (let output of this.outputs.values()) {\n                    outPorts.push({\n                        device: output,\n                        name: output.name,\n                        ID: output.id\n                    })\n                }\n                if (outPorts.length) {\n                    this.setState({ \n                        selectedOutPortID: outPorts[0].ID\n                    })\n\n                    // outputを登録する\n                    this.props.dispatch({type: 'REGISTER_OUTPUT', output: this.outputs.get(outPorts[0].ID)})\n                }\n                this.setState({ \n                    outPorts: outPorts\n                })\n                \n                console.log(\"MIDI READY!!!\");\n                this.setState({message: \"MIDI READY\"})\n\n                // チャンネルを初期化する（Programのセットを行う）\n                this.props.dispatch({\n                    type: 'PROGRAM_SET_ALL'\n                })\n            },\n            // 通信失敗時\n            (msg) => {\n                console.log(\"MIDI FAILED - \" + msg);\n            }\n        )\n\n        this.doClick = this.doClick.bind(this)\n        this.doChange = this.doChange.bind(this)\n        this.inputEvent = this.inputEvent.bind(this)\n    }\n\n    render() {\n        // セレクトタグの内容を作る\n        let n = 0\n        let in_items = this.state.inPorts.map(value =>\n            <option key={n++} value={value.ID}>{value.name} ({value.ID})</option> \n            )\n        let out_items = this.state.outPorts.map(value =>\n            <option key={n++} value={value.ID}>{value.name} ({value.ID})</option> \n            )\n\n        return (\n        <div className='row'>\n            <div className='col-md-3'>\n                <table><tbody>\n                    <tr><td>Input: </td><td><select>{ in_items }</select></td></tr>\n                    <tr><td>Output: </td><td><select onChange={this.doChange} defaultValue=\"-1\">{ out_items }</select></td></tr>\n                </tbody></table>\n            </div>\n            <div className='col-md-3'>\n                <ChordPlayer />\n            </div>\n        </div>\n        )\n    }\n}\n\nexport default connect(state=>state)(Instrument)\n","import React, { Component } from 'react'\nimport { addEvent } from './Store'\nimport { connect } from 'react-redux'\n\nclass PianoRollCell extends Component {\n    tdUnselected = {\n        width: '50px'\n    }\n    tdSelected = {\n        width: '50px',\n        background: 'cyan'\n    }\n    border = {\n        borderLeft: '2px solid blue',\n        background: 'cyan'\n    }\n\n    // セルがマウスオーバーされた時\n    doMouseEnter(e) {\n        // シングルモードの時\n        if (this.props.isSingle) {\n            // マウス左クリックが押下状態にある時\n            if ((e.buttons & 0x0001) ? true : false) {\n                console.log('Entered')\n                this.doClick(e)\n            }\n        }\n    }\n\n    // セルがクリックされた時\n    doClick(e) {\n        let tick = e.target.getAttribute('data-col') * 1\n        let note = e.target.getAttribute('data-row') * 1\n        this.setState(state => ({selected: !state.selected}))\n\n        if (this.state.selected){\n            this.props.dispatch({\n                type: 'DEL_EVENT',\n                data: {\n                    channel: this.props.channel,\n                    mea: this.props.mea,\n                    tick: tick,\n                    note: note\n                }\n            })\n        }\n        else {\n            let action = addEvent({\n                channel: this.props.channel,\n                mea: this.props.mea,\n                tick: tick,\n                note: note,\n                gate: 120,\n                vel: 100\n            })\n            this.props.dispatch(action)\n\n            // 単音モードの場合は同じTickの音を消す（遅い実装っぽい、Storeに関数作る？、もしくはindexを取得）\n            if (this.props.isSingle) {\n                // 検索\n                const sameTickEvents = this.props.noteEvents.filter(noteEvent=>(\n                    noteEvent.channel == action.data.channel &&\n                    noteEvent.mea == action.data.mea &&\n                    noteEvent.tick == action.data.tick\n                ))\n\n                // 削除\n                if (sameTickEvents.length > 0) {\n                    sameTickEvents.map((noteEvent)=>{\n                        this.props.dispatch({\n                            type: 'DEL_EVENT',\n                            data: {\n                                channel: this.props.channel,    \n                                mea: this.props.mea,\n                                tick: tick,\n                                note: noteEvent.note\n                            }\n                        })\n                    })\n                }\n            }\n\n            if (this.props.isPreview) {\n                // プレビュー前にNoteOffする\n                this.props.dispatch({\n                    type: 'ALL_NOTE_OFF'\n                })\n                \n                // 音をプレビューする\n                this.props.dispatch({\n                    type: 'NOTE_ON',\n                    data: {\n                        channel: this.props.channel,\n                        note: note,\n                        gateMs: 200,\n                        vel: 100\n                    }\n                })\n            }\n        }\n    }\n\n    constructor(props){\n        super(props)\n\n        // ステートの設定\n        this.state = {\n            selected: false\n        }\n        \n        this.doClick = this.doClick.bind(this)\n        this.doMouseEnter = this.doMouseEnter.bind(this)\n    }\n    \n\n    render() {\n        let noteNum = this.props.row\n        let tick = this.props.col\n\n        // イベントを検索し、見つけたらtrueとする（なんか遅くなりそうな実装）\n        let findData = this.props.noteEvents.find(noteEvent=> (\n            noteEvent.channel == this.props.channel &&\n            noteEvent.mea == this.props.mea &&\n            noteEvent.note == noteNum &&\n            noteEvent.tick == tick\n        ))\n        if (findData === undefined) this.state.selected = false\n        else this.state.selected = true\n\n        return (\n            <td style={this.state.selected ? this.tdSelected : this.tdUnselected}\n            onClick={this.doClick} onMouseEnter={this.doMouseEnter} data-row={noteNum} data-col={tick}>\n                <div style={this.border}></div>\n            </td>\n        )\n    }\n}\n\nexport default connect(state=>state)(PianoRollCell)\n","import React, { Component } from 'react'\nimport PianoRollCell from './PianoRollCell'\nimport { connect } from 'react-redux'\nimport Lib from './Lib'\n\nclass PianoRoll extends Component {\n    // div全体（スクロールできる）\n    box = {\n        height: '500px',\n        overflow: 'auto',\n        cursor: 'pointer',\n        userSelect: 'none'\n    }\n    th = {\n        width: '100px'\n    }\n    \n    changeBaseKey(e) { this.setState({baseNote: e.target.value}) }\n    changeMea(e) { \n        this.props.dispatch({type: 'MOVE_MEA', mea: e.target.value}) \n    }\n    changeSingle(e) {this.setState({isSingle: e.target.checked})}\n    changePreview(e) {this.setState({isPreview: e.target.checked})}\n\n    constructor(props){\n        super(props)\n\n        // ステートの設定\n        this.state = {\n            width : 16,\n            height : 13,\n            baseNote: 72,\n            isSingle: true, // 単音モード\n            isPreview: true, // プレビューするかどうか\n        }\n        \n        this.changeBaseKey = this.changeBaseKey.bind(this)\n        this.changeMea = this.changeMea.bind(this)\n        this.changeSingle = this.changeSingle.bind(this)\n        this.changePreview = this.changePreview.bind(this)\n        this.rollStyle = this.rollStyle.bind(this)\n\n        this.ref = React.createRef()\n    }\n\n    // 読み込み時にピアノロールの中央までスクロールを行う\n    componentDidMount() {\n        this.ref.current.scrollIntoView({\n            block: 'center'\n        })\n    }\n\n    // スケールによってピアノロールの色を変える\n    rollStyle(note) {\n        // スケール（とりあえず、ダイアトニック）\n        const scale = [1,0,1,0,1,1,0,1,0,1,0,1]\n        // スケール外の音\n        const tr_outScale = { background: 'whitesmoke' }\n        // スケール内の音\n        const tr_onScale = { background: 'white' }\n        // 現在の調の音\n        const tr_baseKey = { background: 'mistyrose' }\n        // オフセット\n        const offset = (note - this.state.baseNote + 120) % 12\n\n        if (offset == 0) return tr_baseKey\n        if (scale[offset]) return tr_onScale\n        else return tr_outScale\n    }\n\n    render() {\n        // ダミーの数値（Reactのkeyのため必要？）\n        const notes = []\n        for (let i = 127; i >= 0; i--) {\n            notes.push(i)\n        }\n        const ticks = []\n        for (let i = 1; i <= 16; i++) {\n            ticks.push(i)\n        }\n\n        // ピアノロール生成\n        const rows = notes.map((fuga, indexRow) => {\n            const note = 127 - indexRow\n            return (\n                <tr key={fuga} style={this.rollStyle(note)}>\n                    {/* 音階 */}\n                    <th style={this.th} ref={note == this.state.baseNote ? this.ref : ''}>{Lib.noteNumberToNoteName(note)}</th>\n\n                    {/* 選択できる部分 */}\n                    {ticks.map((hoge, indexCol) => \n                        <PianoRollCell key={hoge} row={note} col={indexCol} isSingle={this.state.isSingle} isPreview={this.state.isPreview} />\n                    )}\n                </tr>\n            )\n        })\n\n        return (\n            <div>\n                {/* ピアノロール表示 */}\n                <div style={this.box}>\n                <table className=\"table table-bordered table-sm\"><tbody>\n                    {rows}\n                </tbody></table>\n                </div>\n\n                {/* 操作部 */}\n                <p>\n                    {/* 調性 */}\n                    <label>Key: </label>\n                    <input type=\"number\" value={this.state.baseNote} min=\"12\" max=\"127\" onChange={(this.changeBaseKey)} />\n                    ({Lib.noteNumberToNoteName(this.state.baseNote)})\n\n                    {/* 小節 */}\n                    <label>Mea: </label>\n                    <input type=\"number\" value={this.props.mea} min=\"1\" max=\"127\" onChange={this.changeMea} />\n\n                    {/* 単音モードボタン */}\n                    <label>Single: </label>\n                    <input type=\"checkbox\" id=\"single\" onChange={this.changeSingle} checked={this.state.isSingle} />\n\n                    {/* プレビューボタン */}\n                    <label>Preview: </label>\n                    <input type=\"checkbox\" id=\"single\" onChange={this.changePreview} checked={this.state.isPreview} />\n                </p>                \n            </div>\n        )\n    }\n}\n\nexport default connect(state=>state)(PianoRoll)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Lib from './Lib'\n\nclass NotePane extends Component {\n    box = {\n        height: '500px',\n        overflow: 'auto'\n    }\n\n    doClick(e) {\n    }\n\n    constructor(props){\n        super(props)\n\n        // ステートの設定\n        this.state = {\n        }\n        \n        this.doClick = this.doClick.bind(this)\n    }\n\n    render() {\n        // 現在のチャンネルのイベントのみを取り出す\n        const channelItem = this.props.noteEvents.filter(noteEvent=>{\n            return noteEvent.channel == this.props.channel\n        })\n\n        // ペインに表示されるテーブルを生成\n        const noteItem = channelItem.map((noteEvent, index)=>(\n            <tr key={index}>\n                <td>{noteEvent.mea}</td>\n                <td>{noteEvent.tick}</td>\n                <td>{Lib.noteNumberToNoteName(noteEvent.note)}</td>\n                <td>{noteEvent.gate}</td>\n                <td>{noteEvent.vel}</td>\n            </tr>\n        ))\n\n        return (\n            <div style={this.box}>\n                <table className=\"table table-sm\">\n                    <thead>\n                        <tr>\n                            <th>Mea</th>\n                            <th>Tick</th>\n                            <th>Event</th>\n                            <th>Gate</th>\n                            <th>Vel/Value</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {noteItem}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n}\n\nexport default connect(state=>state)(NotePane)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nclass Conductor extends Component {\n    th = {\n        width: '100px'\n    }\n    td = {\n        width: '50px'\n    }\n    tdNow = {\n        width: '50px',\n        background: 'yellow'\n    }\n    clicker = {\n        overflowY: 'scroll',\n    }\n    maxTick = 16\n\n    PlayToggle() {\n        if (this.state.isPlaying) {\n            this.setState({isPlaying: false})\n            clearTimeout(this.timer)\n        }\n        else {\n            this.setState({isPlaying: true})\n            this.Play()\n            this.timer = setTimeout(this.Proceed,  240 * 1000 / this.state.bpm / this.maxTick )\n        }\n    }\n\n    Play() {\n        // このタイミングで演奏する？ それともストアでやらせるか？\n        // noteを検索\n        const data = this.props.noteEvents.filter(noteEvent=>{\n            if (this.state.isSolo) {\n                return noteEvent.channel == this.props.channel && noteEvent.mea == this.props.mea && noteEvent.tick == this.state.nowTick\n            }\n            else return noteEvent.mea == this.props.mea && noteEvent.tick == this.state.nowTick\n        })\n\n        // 該当するデータがあれば\n        if (data.length > 0) {\n            // 音を鳴らす\n            data.map(d => {\n                this.props.dispatch({\n                    type: 'NOTE_ON',\n                    data: {\n                        channel: d.channel,\n                        note: d.note,\n                        gateMs: 240 * 1000 / this.state.bpm * (d.gate / (480 * 4)) - 1,\n                        vel: d.vel,\n                    }\n                })\n            })\n        }\n    }\n\n    // tickが進むごとに実行される関数\n    Proceed() {\n        // 小節の最後までTickが進んだらmeaを進める\n        let nextTick = this.state.nowTick + 1\n        if (nextTick == this.maxTick) {\n            nextTick %= this.maxTick\n            if (!this.state.isLoop) {\n                // なぜか遅れる（要対処！！！！）\n                this.props.dispatch({ type:'MOVE_MEA', mea: this.props.mea*1 +1 })\n            }\n        }\n        this.setState({ nowTick: nextTick })\n        \n        this.Play()\n        \n        // 小節の終わりの一個前のtickに来たら、delayTimeを少し短くする（無理やりな実装）\n        let delayTime = 240 * 1000 / this.state.bpm / this.maxTick\n        if (nextTick == this.maxTick - 1 && !this.state.isLoop) delayTime -= 80\n        \n        this.timer = setTimeout(this.Proceed, delayTime )\n    }\n\n    ChangeBPM(e) {\n        this.setState({bpm: e.target.value})\n    }\n\n    ChangeLoop(e) {\n        this.setState({isLoop: e.target.checked})\n    }\n\n    ChangeSolo(e) {\n        this.setState({isSolo: e.target.checked})\n    }\n    ChangeTick(e) {\n        this.setState({nowTick: e.target.getAttribute('data-tick')*1})\n    }\n\n    constructor(props){\n        super(props)\n\n        // ステートの設定\n        this.state = {\n            bpm : 60,\n            nowTick: 0,\n            isPlaying: false, // 再生中かどうか\n            isLoop: true, // ループするかどうか\n            isSolo: false // ソロ演奏するかどうか\n        }\n        \n        this.PlayToggle = this.PlayToggle.bind(this)\n        this.Proceed = this.Proceed.bind(this)\n        this.ChangeBPM = this.ChangeBPM.bind(this)\n        this.ChangeLoop = this.ChangeLoop.bind(this)\n        this.ChangeSolo = this.ChangeSolo.bind(this)\n        this.ChangeTick = this.ChangeTick.bind(this)\n    }\n\n    render() {\n        let ticks = []\n        for (let i = 0; i < this.maxTick; i++) {\n            ticks.push(<td key={i} data-tick={i} onClick={this.ChangeTick} style={this.state.nowTick == i ? this.tdNow : this.td}></td>)\n        }\n\n        return (\n            <div>\n                <p>\n                    {/* tempo */}\n                    <input type=\"number\" value={this.state.bpm} min=\"10\" max=\"300\" onChange={this.ChangeBPM} />\n                    \n                    {/* 再生・停止ボタン（別コンポーネントのほうがいい？） */}\n                    <button className=\"btn btn-primary\" onClick={this.PlayToggle}>\n                        {this.state.isPlaying ? 'Playing' : 'Play'}\n                    </button>\n\n                    {/* ループボタン */}\n                    <label>Loop: </label>\n                    <input type=\"checkbox\" id=\"loop\" onChange={this.ChangeLoop} checked={this.state.isLoop}/>\n\n                    {/* ソロボタン */}\n                    <label>Solo: </label>\n                    <input type=\"checkbox\" id=\"solo\" onChange={this.ChangeSolo} checked={this.state.isSolo}/>\n                </p>\n\n                {/* シーケンスクリック（横に流れていくやつ）表示 */}\n                <div style={this.clicker}>\n                <table className=\"table table-bordered table-sm\"><tbody><tr>\n                    <th style={this.th}>4/4</th>\n                    {ticks}\n                </tr></tbody></table>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default connect(state=>state)(Conductor)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Conductor from './Conductor'\nimport Instrument from './Instrument'\n\nclass Player extends Component {\n\n    constructor(props){\n        super(props)\n\n        // ステートの設定\n        this.state = {\n        }\n        \n    }\n\n    render() {\n        return <div>\n        </div>\n    }\n}\n\nexport default connect(state=>state)(Player)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Lib from './Lib'\n\nclass ChannelSelector extends Component {\n\n    // テストで音を鳴らす\n    ChangeSelector(e) {\n        this.props.dispatch({\n            type: 'MOVE_CHANNEL',\n            channel: e.target.value*1\n        })\n    }\n\n    // チャンネルを追加する\n    AddChannel() {\n        this.props.dispatch({\n            type: 'ADD_CHANNEL',\n        })\n    }\n\n    constructor(props){\n        super(props)\n\n        // ステートの設定\n        this.state = {\n        }\n\n        this.ChangeSelector = this.ChangeSelector.bind(this)\n        this.AddChannel = this.AddChannel.bind(this)\n    }\n\n    render() {\n        // セレクトタグの内容を作る\n        let n = 0\n        let items = this.props.channelData.map(channel =>\n            <option key={n} value={n}>Ch.{n++} {Lib.programName[channel.program]}</option> \n        )\n\n        return (\n            <>\n            <select onChange={this.ChangeSelector} defaultValue=\"-1\" value={this.props.channel}>{ items }</select>\n            <button className=\"btn btn-secondary btn-sm\" onClick={this.AddChannel}>+</button>\n            </>\n        )\n    }\n}\n\nexport default connect(state=>state)(ChannelSelector)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Lib from './Lib'\n\nclass ProgramChanger extends Component {\n\n    // Program Change\n    ChangeSelector(e) {\n        this.props.dispatch({\n            type: 'PROGRAM_CHANGE',\n            programNumber: e.target.value*1\n        })\n    }\n\n    constructor(props){\n        super(props)\n\n        // ステートの設定\n        this.state = {\n        }\n\n        this.ChangeSelector = this.ChangeSelector.bind(this)\n    }\n\n    render() {\n        // セレクトタグの内容を作る\n        let n = 0\n        let items = Lib.programName.map(value =>\n            <option key={n} value={n}>{n++}. {value}</option> \n        )\n\n        return (\n            <select onChange={this.ChangeSelector} value={this.props.channelData[this.props.channel].program}>{ items }</select>\n        )\n    }\n}\n\nexport default connect(state=>state)(ProgramChanger)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Button, Modal, Table } from 'react-bootstrap';\n\nclass SongSelector extends Component {\n    closeModal() {\n        this.setState({isModalOpen: false})\n    }\n    openModal() {\n        this.setState({isModalOpen: true})\n    }\n    selectID(id) {\n        this.setState({selectedID: id})\n    }\n    openSong() {\n        this.props.dispatch({\n            type: 'OPEN_SONG',\n            id: this.state.selectedID\n        })\n        this.closeModal()\n    }\n\n    constructor(props) {\n        super(props)\n\n        // ステートの設定\n        this.state = {\n            isModalOpen: false,\n            selectedID: -1\n        }\n\n        this.closeModal = this.closeModal.bind(this)\n        this.openModal = this.openModal.bind(this)\n        this.selectID = this.selectID.bind(this)\n        this.openSong = this.openSong.bind(this)\n    }\n\n    render() {\n        let items= this.props.songs.map(song=>(\n            <tr key={song.id} onClick={()=>this.selectID(song.id)}\n                className={this.state.selectedID === song.id ? \"table-active\" : ''}>\n                <td>{song.id}: {song.name}</td>\n                <td>{song.updated}</td>\n                <td>{song.author}</td>\n            </tr>\n        ))\n\n        return <>\n        <Button variant=\"primary\" onClick={this.openModal}>\n            Open\n        </Button>\n\n        <Modal show={this.state.isModalOpen} onHide={this.closeModal}>\n            <Modal.Header closeButton>\n                <Modal.Title>Song List</Modal.Title>\n            </Modal.Header>\n            \n            <Modal.Body>\n                <Table>\n                <tbody>\n                    <tr>\n                        <th>Song Name</th>\n                        <th>Updated</th>\n                        <th>Author</th>\n                    </tr>\n                    {items}\n                </tbody>\n                </Table>\n            </Modal.Body>\n            \n            <Modal.Footer>\n                { this.state.selectedID !== -1 &&\n                    <Button variant=\"primary\" onClick={this.openSong}>\n                        Open\n                    </Button>\n                }\n            </Modal.Footer>\n            </Modal>\n        </>\n    }\n}\n\nexport default connect(state => state)(SongSelector)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Button, Modal } from 'react-bootstrap';\n\nclass SaveDialog extends Component {\n    closeModal() {\n        this.setState({isModalOpen: false})\n    }\n    openModal() {\n        this.setState({isModalOpen: true})\n    }\n    onChange(e) {\n        this.setState({name: e.target.value})\n    }\n    save(e) {\n        e.preventDefault()\n        this.props.dispatch({\n            type: 'SAVE_SONG',\n            name: this.state.name\n        })\n        this.closeModal()\n    }\n\n\n    constructor(props) {\n        super(props)\n\n        // ステートの設定\n        this.state = {\n            isModalOpen: false,\n            name: ''\n        }\n\n        this.closeModal = this.closeModal.bind(this)\n        this.openModal = this.openModal.bind(this)\n        this.onChange = this.onChange.bind(this)\n        this.save = this.save.bind(this)\n    }\n\n    render() {\n        return <>\n        <Button variant=\"primary\" onClick={this.openModal}>\n            Save\n        </Button>\n\n        <Modal show={this.state.isModalOpen} onHide={this.closeModal}>\n            <Modal.Header closeButton>\n                <Modal.Title>Save</Modal.Title>\n            </Modal.Header>\n            \n            <Modal.Body>\n                <form onSubmit={this.save}>\n                    <input\n                        className='form-control'\n                        type=\"text\" \n                        value={this.state.name} \n                        onChange={this.onChange} \n                        />\n                    <input type=\"submit\" value='Save' />\n                </form>\n            </Modal.Body>\n            </Modal>\n        </>\n    }\n}\n\nexport default connect(state => state)(SaveDialog)\n","import React, { Component } from 'react'\nimport PianoRoll from './PianoRoll'\nimport NotePane from './NotePane'\nimport { connect } from 'react-redux'\nimport Conductor from './Conductor'\nimport Player from './Player'\nimport ChannelSelector from './ChannelSelector'\nimport ProgramChanger from './ProgramChanger'\nimport SongSelector from './SongSelector'\nimport SaveDialog from './SaveDialog'\n\n\nclass Sequencer extends Component {\n    doClick(e) {\n        this.props.dispatch({\n            type: 'DEL_ALL'\n        })\n    }\n\n    constructor(props){\n        super(props)\n\n        // ステートの設定\n        this.state = {\n        }\n        \n        this.doClick = this.doClick.bind(this)\n    }\n\n    render() {\n        return <div>\n            <div className='row mt-4'>\n                \n                <div className='col-md-3'>\n                    <div>\n                        <div>\n                            <SongSelector />\n                            <SaveDialog />\n                        </div>\n                        <ChannelSelector />\n                        <ProgramChanger />\n                    </div>\n                    <NotePane />\n                    <button className='btn btn-danger' onClick={this.doClick}>Del All Event</button>\n                </div>\n\n                <div className='col-md-9'>\n                    <Conductor />\n                    <PianoRoll />\n                </div>\n                \n                <Player />\n            </div>\n        </div>\n    }\n}\n\nexport default connect(state=>state)(Sequencer)\n","import './App.css'\nimport React, { Component } from 'react'\n\nimport { Provider } from 'react-redux'\nimport MidipStore, { midipReducer } from './midip/Store'\nimport { createStore } from 'redux'\n\nimport { persistStore, persistReducer } from 'redux-persist'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport storage from 'redux-persist/lib/storage'\n\nimport Instrument from './midip/Instrument'\nimport Sequencer from './midip/Sequencer'\n\n// Redux Persistの設定\nconst persistConfig = {\n    key: 'midip',\n    storage: storage,\n    blacklist: ['output'],\n    whitelist: ['songs', 'noteEvents','channelData']\n}\n\n// パーシストレデューサの設定\nconst persistedReducer = persistReducer(persistConfig, midipReducer)\n\n// ストア、パーシスタの作成\nlet store = createStore(persistedReducer)\nlet pstore = persistStore(store)\n\nclass App extends Component {\n    constructor(props){\n        super(props)\n    }\n\n    style = {\n        background: \"#FDFDFD\",\n    }\n\n\n    render() {\n    return (\n        <div className=\"container-fluid\" style={this.style}>\n            <Provider store={store}>\n                <PersistGate loading={<p>loading...</p>} persistor={pstore}>\n                    <Sequencer />\n                    <hr />\n                    <Instrument />\n\n                </PersistGate>\n            </Provider>\n\n            <hr />\n\n            <h4>Memo</h4>\n            <li><a href=\"https://github.com/syun560/midip2021\">GitHub</a></li>\n\n            <h4>参考</h4>\n            <li><a href=\"http://www.yk.rim.or.jp/~kamide/music/chordhelper/\">MIDI Chord Helper</a></li>\n            <li><a href=\"https://musiclab.chromeexperiments.com/Song-Maker/song/5766211904733184\">Song Maker</a></li>\n            <li>KORG-DS-10</li>\n            <li><a href=\"http://www2.odn.ne.jp/~cbu69490/MIDI/MIDIlect/MIDIlect3.html\">MIDIメッセージの分類</a></li>\n            <li><a href=\"https://magenta.tensorflow.org/demos/performance_rnn/index.html\">Performance RNN</a></li>\n            <li><a href=\"https://weva.cloud/?p=284\">Web上で使える音楽ツールまとめ</a></li>\n            <li><a href=\"https://qiita.com/to-lz1/items/94747b67ec97ab10f878\">Web Audio API+Reactでブラウザで動くシーケンサを作る</a></li>\n\n            <footer class=\"text-center text-black-50\">©syun560/2021</footer>\n        </div>\n    )\n    }\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}